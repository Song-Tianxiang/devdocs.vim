{"blockquote":[[20,20],[24,25],[29,33],[631,632],[1008,1008],[1045,1045],[1248,1248],[1253,1253],[1440,1440],[1467,1467],[1471,1471],[1496,1496],[1500,1500],[1540,1540],[1544,1544],[1579,1579],[1583,1583],[1606,1606],[1610,1610],[1771,1773],[1797,1798],[1823,1823],[1827,1827],[1868,1869],[1893,1899],[1919,1919],[1970,1970],[2007,2007],[2084,2093],[2097,2097],[2164,2164],[2192,2197],[2227,2230],[2263,2272],[2626,2632],[2637,2641]],"code":[[10,7,18,"Serializable"],[10,21,32,"CharSequence"],[10,35,44,"Comparable"],[10,45,45,"<"],[10,46,51,"String"],[10,52,52,">"],[10,55,63,"Constable"],[10,66,77,"ConstantDesc"],[14,7,12,"String"],[14,96,100,"\"abc\""],[35,13,18,"String"],[37,85,93,"Character"],[42,37,40,"null"],[43,3,22,"NullPointerException"],[45,5,10,"String"],[46,61,69,"Character"],[47,3,6,"char"],[47,73,78,"String"],[49,7,12,"String"],[50,34,37,"char"],[52,94,101,"Collator"],[58,89,93,"javac"],[59,21,32,"StringBuffer"],[59,35,47,"StringBuilder"],[59,53,88,"java.lang.invoke.StringConcatFactory"],[60,75,82,"toString"],[60,96,101,"Object"],[73,9,25,"Object.toString()"],[74,9,20,"StringBuffer"],[75,9,21,"StringBuilder"],[76,9,15,"Charset"],[473,3,7,"clone"],[473,8,9,", "],[473,10,17,"finalize"],[473,18,19,", "],[473,20,27,"getClass"],[473,28,29,", "],[473,30,35,"notify"],[473,36,37,", "],[473,38,46,"notifyAll"],[473,47,48,", "],[473,49,52,"wait"],[473,53,54,", "],[473,55,58,"wait"],[473,59,60,", "],[473,61,64,"wait"],[483,28,33,"String"],[483,49,67,"compareToIgnoreCase"],[486,16,23,"Collator"],[494,9,16,"Collator"],[504,31,36,"String"],[512,31,36,"String"],[513,96,103,"original"],[518,7,14,"original"],[518,20,25,"String"],[525,19,24,"String"],[531,7,11,"value"],[538,19,24,"String"],[538,104,109,"offset"],[539,56,60,"count"],[544,7,11,"value"],[545,7,12,"offset"],[546,7,11,"count"],[550,7,31,"IndexOutOfBoundsException"],[550,38,43,"offset"],[550,58,62,"count"],[550,80,85,"offset"],[551,7,26,"value.length - count"],[558,19,24,"String"],[558,113,118,"offset"],[559,73,77,"count"],[560,49,52,"char"],[560,87,89,"int"],[565,7,16,"codePoints"],[566,7,12,"offset"],[567,7,11,"count"],[571,7,30,"IllegalArgumentException"],[571,80,90," codePoints"],[572,7,31,"IndexOutOfBoundsException"],[572,38,43,"offset"],[572,58,62,"count"],[572,80,85,"offset"],[573,7,31,"codePoints.length - count"],[586,119,124,"String"],[587,28,34,"Charset"],[587,67,81,"default charset"],[589,19,24,"String"],[591,7,12,"offset"],[591,79,83,"count"],[594,8,11,"byte"],[594,47,50,"char"],[594,72,89,"String(byte[],int)"],[598,7,11,"ascii"],[599,7,12,"hibyte"],[600,7,12,"offset"],[601,7,11,"count"],[605,7,31,"IndexOutOfBoundsException"],[605,38,43,"offset"],[605,58,62,"count"],[605,80,85,"offset"],[606,7,26,"ascii.length - count"],[610,9,27,"String(byte[], int)"],[611,9,50,"String(byte[], int, int, java.lang.String)"],[612,9,58,"String(byte[], int, int, java.nio.charset.Charset)"],[613,9,32,"String(byte[], int, int)"],[614,9,40,"String(byte[], java.lang.String)"],[615,9,48,"String(byte[], java.nio.charset.Charset)"],[616,9,22,"String(byte[])"],[625,119,124,"String"],[626,28,34,"Charset"],[626,67,81,"default charset"],[628,19,24,"String"],[636,7,11,"ascii"],[637,7,12,"hibyte"],[641,9,50,"String(byte[], int, int, java.lang.String)"],[642,9,58,"String(byte[], int, int, java.nio.charset.Charset)"],[643,9,32,"String(byte[], int, int)"],[644,9,40,"String(byte[], java.lang.String)"],[645,9,48,"String(byte[], java.nio.charset.Charset)"],[646,9,22,"String(byte[])"],[653,20,25,"String"],[654,3,8,"String"],[656,112,125,"CharsetDecoder"],[661,7,11,"bytes"],[662,7,12,"offset"],[663,7,12,"length"],[664,7,17,"charsetName"],[668,7,34,"UnsupportedEncodingException"],[669,7,31,"IndexOutOfBoundsException"],[669,38,43,"offset"],[669,58,63,"length"],[669,81,86,"offset"],[670,7,27,"bytes.length - length"],[681,20,25,"String"],[682,3,8,"String"],[685,7,20,"CharsetDecoder"],[689,7,11,"bytes"],[690,7,12,"offset"],[691,7,12,"length"],[692,7,13,"charset"],[692,54,58,"bytes"],[696,7,31,"IndexOutOfBoundsException"],[696,38,43,"offset"],[696,58,63,"length"],[696,81,86,"offset"],[697,7,27,"bytes.length - length"],[708,20,25,"String"],[709,3,8,"String"],[711,112,125,"CharsetDecoder"],[716,7,11,"bytes"],[717,7,17,"charsetName"],[721,7,34,"UnsupportedEncodingException"],[732,20,25,"String"],[733,3,8,"String"],[736,7,20,"CharsetDecoder"],[740,7,11,"bytes"],[741,7,13,"charset"],[741,54,58,"bytes"],[752,20,25,"String"],[752,81,95,"default charset"],[753,3,8,"String"],[756,3,16,"CharsetDecoder"],[760,7,11,"bytes"],[761,7,12,"offset"],[762,7,12,"length"],[766,7,31,"IndexOutOfBoundsException"],[766,38,43,"offset"],[766,58,63,"length"],[766,81,86,"offset"],[767,7,27,"bytes.length - length"],[778,20,25,"String"],[778,78,92,"default charset"],[779,3,8,"String"],[782,3,16,"CharsetDecoder"],[786,7,11,"bytes"],[802,7,12,"buffer"],[802,18,29,"StringBuffer"],[813,53,66," StringBuilder"],[814,3,11," toString"],[818,7,13,"builder"],[818,19,31,"StringBuilder"],[836,7,12,"length"],[836,27,38,"CharSequence"],[847,11,14,"true"],[847,33,40,"length()"],[847,45,45,"0"],[851,7,13,"isEmpty"],[851,28,39,"CharSequence"],[855,7,10,"true"],[855,15,22,"length()"],[855,27,27,"0"],[855,40,44,"false"],[866,15,18,"char"],[866,71,71,"0"],[866,76,87,"length() - 1"],[866,100,103,"char"],[867,24,24,"0"],[867,45,45,"1"],[869,10,13,"char"],[873,7,12,"charAt"],[873,27,38,"CharSequence"],[877,7,11,"index"],[877,32,35,"char"],[881,11,14,"char"],[881,71,74,"char"],[881,94,94,"0"],[885,7,31,"IndexOutOfBoundsException"],[885,42,46,"index"],[892,90,93,"char"],[893,15,15,"0"],[893,20,27,"length()"],[893,28,31," - 1"],[895,10,13,"char"],[896,8,13,"String"],[896,24,27,"char"],[897,68,71,"char"],[901,7,11,"index"],[901,32,35,"char"],[905,52,56,"index"],[909,7,31,"IndexOutOfBoundsException"],[909,42,46,"index"],[920,94,97,"char"],[921,19,19,"1"],[921,24,29,"length"],[923,10,13,"char"],[923,24,34,"(index - 1)"],[923,67,77,"(index - 2)"],[923,104,107,"char"],[924,3,13,"(index - 2)"],[925,3,6,"char"],[925,17,25,"index - 1"],[929,7,11,"index"],[937,7,31,"IndexOutOfBoundsException"],[937,42,46,"index"],[948,81,86,"String"],[949,3,12,"beginIndex"],[949,33,36,"char"],[949,47,58,"endIndex - 1"],[949,81,84,"char"],[950,3,21,"endIndex-beginIndex"],[954,7,16,"beginIndex"],[954,43,46,"char"],[955,7,14,"endIndex"],[955,43,46,"char"],[963,7,31,"IndexOutOfBoundsException"],[963,42,51,"beginIndex"],[963,69,76,"endIndex"],[963,112,117,"String"],[964,10,19,"beginIndex"],[964,36,43,"endIndex"],[975,33,38,"String"],[975,70,74,"index"],[975,79,93,"codePointOffset"],[976,45,49,"index"],[976,55,69,"codePointOffset"],[980,7,11,"index"],[981,7,21,"codePointOffset"],[985,29,34,"String"],[989,7,31,"IndexOutOfBoundsException"],[989,38,42,"index"],[989,90,95,"String"],[989,104,118,"codePointOffset"],[990,51,55,"index"],[990,72,86,"codePointOffset"],[990,107,121,"codePointOffset"],[991,44,48,"index"],[991,87,101,"codePointOffset"],[1004,48,55,"srcBegin"],[1004,102,109,"srcEnd-1"],[1005,40,54,"srcEnd-srcBegin"],[1005,105,107,"dst"],[1006,3,10,"dstBegin"],[1012,7,14,"srcBegin"],[1013,7,12,"srcEnd"],[1014,7,9,"dst"],[1015,7,14,"dstBegin"],[1019,7,31,"IndexOutOfBoundsException"],[1021,9,16,"srcBegin"],[1022,9,16,"srcBegin"],[1022,34,39,"srcEnd"],[1023,9,14,"srcEnd"],[1024,9,16,"dstBegin"],[1025,9,34,"dstBegin+(srcEnd-srcBegin)"],[1025,51,60,"dst.length"],[1035,3,12,"getBytes()"],[1035,37,51,"default charset"],[1041,48,55,"srcBegin"],[1041,102,109,"srcEnd-1"],[1042,40,54,"srcEnd-srcBegin"],[1043,3,6," dst"],[1043,26,33,"dstBegin"],[1049,7,14,"srcBegin"],[1050,7,12,"srcEnd"],[1051,7,9,"dst"],[1052,7,14,"dstBegin"],[1056,7,31,"IndexOutOfBoundsException"],[1058,9,16,"srcBegin"],[1059,9,16,"srcBegin"],[1059,34,39,"srcEnd"],[1060,9,14,"srcEnd"],[1061,9,16,"dstBegin"],[1062,9,34,"dstBegin+(srcEnd-srcBegin)"],[1062,51,61," dst.length"],[1069,16,21,"String"],[1071,107,120,"CharsetEncoder"],[1076,7,17,"charsetName"],[1084,7,34,"UnsupportedEncodingException"],[1095,16,21,"String"],[1098,14,27,"CharsetEncoder"],[1102,7,13,"charset"],[1102,54,59,"String"],[1117,16,21,"String"],[1117,58,72,"default charset"],[1119,109,122,"CharsetEncoder"],[1135,63,67," true"],[1135,104,107,"null"],[1136,3,9," String"],[1138,49,56,"Collator"],[1142,7,12,"equals"],[1142,23,28,"Object"],[1146,7,14,"anObject"],[1146,45,50,"String"],[1150,7,10,"true"],[1150,45,50,"String"],[1150,79,83,"false"],[1154,9,25,"compareTo(String)"],[1155,9,32,"equalsIgnoreCase(String)"],[1162,41,52,"StringBuffer"],[1162,69,72,"true"],[1162,94,99,"String"],[1163,43,54,"StringBuffer"],[1163,89,100,"StringBuffer"],[1165,49,56,"Collator"],[1169,7,8,"sb"],[1169,16,27,"StringBuffer"],[1169,45,50,"String"],[1173,7,10,"true"],[1173,20,25,"String"],[1173,87,98,"StringBuffer"],[1173,101,105,"false"],[1184,41,52,"CharSequence"],[1184,69,72,"true"],[1184,94,99,"String"],[1185,71,82,"CharSequence"],[1185,89,100,"StringBuffer"],[1188,49,56,"Collator"],[1192,7,8,"cs"],[1192,41,46,"String"],[1196,7,10,"true"],[1196,20,25,"String"],[1196,98,103," false"],[1207,17,22,"String"],[1207,35,40,"String"],[1212,66,67,"=="],[1213,13,61,"Character.toLowerCase(Character.toUpperCase(int))"],[1216,3,10,"Collator"],[1220,7,19,"anotherString"],[1220,27,32,"String"],[1220,50,55,"String"],[1224,7,10,"true"],[1224,35,38,"null"],[1224,72,77,"String"],[1224,94,99," false"],[1228,9,22,"equals(Object)"],[1229,9,20,"codePoints()"],[1237,42,47,"String"],[1238,65,70,"String"],[1239,44,49,"String"],[1240,26,34,"compareTo"],[1240,44,44,"0"],[1240,63,76,"equals(Object)"],[1240,98,101,"true"],[1245,45,45,"<"],[1245,116,124,"compareTo"],[1246,66,66,"k"],[1251,14,22,"compareTo"],[1255,49,56,"Collator"],[1259,7,15,"compareTo"],[1259,30,39,"Comparable"],[1259,40,40,"<"],[1259,41,46,"String"],[1259,47,47,">"],[1263,7,19,"anotherString"],[1263,27,32,"String"],[1267,17,17,"0"],[1267,85,85,"0"],[1268,63,63,"0"],[1277,3,11,"compareTo"],[1278,3,51,"Character.toLowerCase(Character.toUpperCase(int))"],[1281,7,14,"Collator"],[1285,7,9,"str"],[1285,17,22,"String"],[1298,9,16,"Collator"],[1299,9,20,"codePoints()"],[1308,23,28,"String"],[1309,66,71,"String"],[1309,111,117,"toffset"],[1310,10,12,"len"],[1310,69,75,"ooffset"],[1310,92,94,"len"],[1310,111,115,"false"],[1313,5,11,"toffset"],[1314,5,11,"ooffset"],[1315,5,15,"toffset+len"],[1315,52,57,"String"],[1316,5,15,"ooffset+len"],[1317,51,53,"len"],[1317,66,87,"this.charAt(toffset + "],[1317,89,116,") != other.charAt(ooffset + "],[1318,6,6,")"],[1320,64,71,"Collator"],[1324,7,13,"toffset"],[1325,7,11,"other"],[1326,7,13,"ooffset"],[1327,7,9,"len"],[1331,7,10,"true"],[1331,118,122,"false"],[1341,23,28,"String"],[1341,80,84,"other"],[1341,101,104,"true"],[1342,101,110,"ignoreCase"],[1343,13,21,"tsequence"],[1343,27,35,"osequence"],[1343,57,65,"tsequence"],[1344,3,53,"this.substring(toffset, toffset + len).codePoints()"],[1344,59,67,"osequence"],[1345,3,54,"other.substring(ooffset, ooffset + len).codePoints()"],[1345,71,74,"true"],[1347,5,11,"toffset"],[1348,5,11,"ooffset"],[1349,5,15,"toffset+len"],[1349,61,66,"String"],[1350,5,15,"ooffset+len"],[1351,8,17,"ignoreCase"],[1351,22,26,"false"],[1351,108,117,"ignoreCase"],[1352,5,8,"true"],[1352,11,32,"Character.toLowerCase("],[1352,34,59,"Character.toUpperCase(int)"],[1352,60,60,")"],[1356,3,12,"ignoreCase"],[1356,17,20,"true"],[1356,27,34,"Collator"],[1360,7,16,"ignoreCase"],[1360,23,26,"true"],[1361,7,13,"toffset"],[1362,7,11,"other"],[1363,7,13,"ooffset"],[1364,7,9,"len"],[1364,66,69,"char"],[1368,7,10,"true"],[1368,110,114,"false"],[1369,72,81,"ignoreCase"],[1373,9,20,"codePoints()"],[1384,7,12,"prefix"],[1385,7,13,"toffset"],[1389,7,10,"true"],[1390,7,13,"toffset"],[1390,16,20,"false"],[1390,47,51,"false"],[1390,56,62,"toffset"],[1390,111,116,"String"],[1404,7,12,"prefix"],[1408,7,10,"true"],[1409,15,19,"false"],[1409,47,50,"true"],[1410,7,12,"String"],[1410,42,55,"equals(Object)"],[1425,7,12,"suffix"],[1429,7,10,"true"],[1430,15,19,"false"],[1430,61,64,"true"],[1431,7,12,"String"],[1431,42,55,"equals(Object)"],[1438,60,65,"String"],[1442,9,11,"int"],[1442,31,34,"s[i]"],[1442,72,72,"n"],[1442,107,107,"^"],[1447,7,14,"hashCode"],[1447,25,30,"Object"],[1455,9,39,"Object.equals(java.lang.Object)"],[1456,9,49,"System.identityHashCode(java.lang.Object)"],[1463,118,119,"ch"],[1464,49,54,"String"],[1465,41,42,"ch"],[1469,32,33,"ch"],[1473,77,78,"-1"],[1477,7,8,"ch"],[1481,115,116,"-1"],[1492,29,30,"ch"],[1492,85,90,"String"],[1493,3,11,"fromIndex"],[1493,85,86,"ch"],[1498,32,33,"ch"],[1502,92,100,"fromIndex"],[1502,108,109,"-1"],[1504,43,51,"fromIndex"],[1506,26,27,"-1"],[1508,32,35,"char"],[1512,14,27,"substring(int)"],[1512,88,96,"fromIndex"],[1513,41,49,"fromIndex"],[1514,51,52,"ch"],[1514,101,122,"indexOf(int, int, int)"],[1515,42,47,"String"],[1515,49,49,"s"],[1515,65,100,"s.indexOf(ch, fromIndex, s.length())"],[1516,7,15,"fromIndex"],[1520,7,8,"ch"],[1521,7,15,"fromIndex"],[1526,24,32,"fromIndex"],[1526,38,39,"-1"],[1533,115,124,"beginIndex"],[1534,23,30,"endIndex"],[1536,29,30,"ch"],[1536,85,90,"String"],[1537,3,12,"beginIndex"],[1537,31,38,"endIndex"],[1537,112,113,"ch"],[1542,32,33,"ch"],[1546,92,101,"beginIndex"],[1547,3,10,"endIndex"],[1547,18,19,"-1"],[1549,32,35,"char"],[1553,7,8,"ch"],[1554,7,16,"beginIndex"],[1555,7,14,"endIndex"],[1560,24,33,"beginIndex"],[1560,49,56,"endIndex"],[1560,62,63,"-1"],[1564,7,37,"StringIndexOutOfBoundsException"],[1564,44,53,"beginIndex"],[1564,71,78,"endIndex"],[1564,114,119,"String"],[1565,18,27,"beginIndex"],[1565,44,51,"endIndex"],[1576,105,106,"ch"],[1581,32,33,"ch"],[1585,77,78,"-1"],[1585,97,102,"String"],[1590,7,8,"ch"],[1594,114,115,"-1"],[1603,34,35,"ch"],[1608,32,33,"ch"],[1612,93,101,"fromIndex"],[1612,109,110,"-1"],[1614,32,35,"char"],[1618,7,8,"ch"],[1619,7,15,"fromIndex"],[1619,95,103,"fromIndex"],[1626,16,24,"fromIndex"],[1626,30,31,"-1"],[1635,44,44,"k"],[1639,23,23,"k"],[1639,38,39,"-1"],[1643,7,9,"str"],[1647,72,73,"-1"],[1656,44,44,"k"],[1661,23,23,"k"],[1661,38,39,"-1"],[1665,14,27,"substring(int)"],[1665,88,96,"fromIndex"],[1666,41,49,"fromIndex"],[1667,51,53,"str"],[1668,7,31,"indexOf(String, int, int)"],[1668,66,71,"String"],[1668,73,73,"s"],[1668,91,93,"str"],[1669,7,43,"s.indexOf(str, fromIndex, s.length())"],[1669,60,68,"fromIndex"],[1673,7,9,"str"],[1674,7,15,"fromIndex"],[1678,105,106,"-1"],[1686,108,111,"this"],[1692,28,42,"indexOf(String)"],[1696,7,9,"str"],[1697,7,16,"beginIndex"],[1698,7,14,"endIndex"],[1702,105,106,"-1"],[1707,7,37,"StringIndexOutOfBoundsException"],[1707,44,53,"beginIndex"],[1707,71,78,"endIndex"],[1707,114,119,"String"],[1708,18,27,"beginIndex"],[1708,44,51,"endIndex"],[1720,48,60,"this.length()"],[1722,43,43,"k"],[1726,23,23,"k"],[1726,38,39,"-1"],[1730,7,9,"str"],[1734,71,72,"-1"],[1744,43,43,"k"],[1749,23,23,"k"],[1749,38,39,"-1"],[1753,7,9,"str"],[1754,7,15,"fromIndex"],[1758,116,117,"-1"],[1777,7,16,"beginIndex"],[1785,7,31,"IndexOutOfBoundsException"],[1785,38,47,"beginIndex"],[1785,95,100,"String"],[1792,94,103,"beginIndex"],[1793,22,33,"endIndex - 1"],[1793,72,90,"endIndex-beginIndex"],[1802,7,16,"beginIndex"],[1803,7,14,"endIndex"],[1811,7,31,"IndexOutOfBoundsException"],[1811,42,51,"beginIndex"],[1811,69,76,"endIndex"],[1811,112,117,"String"],[1812,18,27,"beginIndex"],[1812,44,51,"endIndex"],[1831,7,17,"subSequence"],[1831,32,43,"CharSequence"],[1835,42,47,"String"],[1835,73,84,"CharSequence"],[1839,7,16,"beginIndex"],[1840,7,14,"endIndex"],[1848,7,31,"IndexOutOfBoundsException"],[1848,38,47,"beginIndex"],[1848,52,59,"endIndex"],[1848,77,84,"endIndex"],[1848,102,109,"length()"],[1849,7,16,"beginIndex"],[1849,34,41,"endIndex"],[1862,43,43,"0"],[1862,56,61,"String"],[1862,96,101,"String"],[1863,112,117,"String"],[1873,7,9,"str"],[1873,17,22,"String"],[1873,64,69,"String"],[1884,64,70,"oldChar"],[1884,92,98,"newChar"],[1886,20,26,"oldChar"],[1886,89,94,"String"],[1887,8,13,"String"],[1887,48,53,"String"],[1888,46,51,"String"],[1888,93,99,"oldChar"],[1889,17,23,"newChar"],[1903,7,13,"oldChar"],[1904,7,13,"newChar"],[1908,74,80,"oldChar"],[1908,87,93,"newChar"],[1917,47,55,".matches("],[1917,61,61,")"],[1919,3,9,"Pattern"],[1919,11,18,"matches("],[1919,9,13,"regex"],[1919,24,25,", "],[1919,16,18,"str"],[1919,29,29,")"],[1923,7,11,"regex"],[1927,7,10,"true"],[1931,7,28,"PatternSyntaxException"],[1939,9,15,"Pattern"],[1950,7,7,"s"],[1954,36,36,"s"],[1967,47,60,".replaceFirst("],[1967,66,66,","],[1967,72,72,")"],[1970,3,3," "],[1970,4,10,"Pattern"],[1970,11,11,"."],[1970,12,18,"compile"],[1970,19,19,"("],[1970,20,24,"regex"],[1970,25,26,")."],[1970,27,33,"matcher"],[1970,34,34,"("],[1970,35,37,"str"],[1970,38,39,")."],[1970,40,51,"replaceFirst"],[1970,52,52,"("],[1970,53,56,"repl"],[1970,57,58,") "],[1972,26,26,"\\"],[1972,47,47,"$"],[1973,59,96,"Matcher.replaceFirst(java.lang.String)"],[1974,3,44,"Matcher.quoteReplacement(java.lang.String)"],[1978,7,11,"regex"],[1979,7,17,"replacement"],[1983,21,26,"String"],[1987,7,28,"PatternSyntaxException"],[1995,9,15,"Pattern"],[2004,47,58,".replaceAll("],[2004,64,64,","],[2004,70,70,")"],[2007,3,3," "],[2007,4,10,"Pattern"],[2007,11,11,"."],[2007,12,18,"compile"],[2007,19,19,"("],[2007,20,24,"regex"],[2007,25,26,")."],[2007,27,33,"matcher"],[2007,34,34,"("],[2007,35,37,"str"],[2007,38,39,")."],[2007,40,49,"replaceAll"],[2007,50,50,"("],[2007,51,54,"repl"],[2007,55,56,") "],[2009,26,26,"\\"],[2009,47,47,"$"],[2010,59,76,"Matcher.replaceAll"],[2011,3,44,"Matcher.quoteReplacement(java.lang.String)"],[2015,7,11,"regex"],[2016,7,17,"replacement"],[2020,21,26,"String"],[2024,7,28,"PatternSyntaxException"],[2032,9,15,"Pattern"],[2045,7,12,"target"],[2046,7,17,"replacement"],[2071,7,11,"limit"],[2082,14,26,"\"boo:and:foo\""],[2095,48,53,"split("],[2095,59,59,","],[2095,62,62,")"],[2097,3,3," "],[2097,4,10,"Pattern"],[2097,11,11,"."],[2097,12,18,"compile"],[2097,19,19,"("],[2097,20,24,"regex"],[2097,25,26,")."],[2097,27,31,"split"],[2097,32,32,"("],[2097,33,35,"str"],[2097,36,38,", "],[2097,39,39,"n"],[2097,40,41,") "],[2101,7,11,"regex"],[2102,7,11,"limit"],[2110,7,28,"PatternSyntaxException"],[2118,9,15,"Pattern"],[2137,7,11,"limit"],[2146,13,28,"\"boo:::and::foo\""],[2161,52,71,"splitWithDelimiters("],[2161,77,77,","],[2161,80,80,")"],[2164,7,7," "],[2164,8,14,"Pattern"],[2164,15,15,"."],[2164,16,22,"compile"],[2164,23,23,"("],[2164,24,28,"regex"],[2164,29,30,")."],[2164,31,49,"splitWithDelimiters"],[2164,50,50,"("],[2164,51,53,"str"],[2164,54,56,", "],[2164,57,57,"n"],[2164,58,59,") "],[2168,7,11,"regex"],[2169,7,11,"limit"],[2187,56,60,"split"],[2190,14,26,"\"boo:and:foo\""],[2201,7,11,"regex"],[2209,7,28,"PatternSyntaxException"],[2217,9,15,"Pattern"],[2224,50,70,"CharSequence elements"],[2225,3,11,"delimiter"],[2232,41,46,"\"null\""],[2236,7,15,"delimiter"],[2237,7,14,"elements"],[2241,13,18,"String"],[2241,44,51,"elements"],[2241,70,78,"delimiter"],[2245,7,26,"NullPointerException"],[2245,33,41,"delimiter"],[2245,46,53,"elements"],[2245,58,61,"null"],[2253,9,20,"StringJoiner"],[2260,17,22,"String"],[2260,50,70,"CharSequence elements"],[2261,3,11,"delimiter"],[2274,41,44,"null"],[2274,52,57,"\"null\""],[2278,7,15,"delimiter"],[2278,81,88,"elements"],[2278,107,112,"String"],[2279,7,14,"elements"],[2279,21,28,"Iterable"],[2279,49,56,"elements"],[2283,13,18,"String"],[2283,46,53,"elements"],[2287,7,26,"NullPointerException"],[2287,33,41,"delimiter"],[2287,46,53,"elements"],[2287,58,61,"null"],[2295,9,42,"join(CharSequence,CharSequence...)"],[2296,9,20,"StringJoiner"],[2303,42,47,"String"],[2303,92,97,"Locale"],[2304,49,57,"Character"],[2305,13,18,"String"],[2305,29,34,"String"],[2320,7,12,"locale"],[2324,11,16,"String"],[2332,9,21,"toLowerCase()"],[2333,9,21,"toUpperCase()"],[2334,9,27,"toUpperCase(Locale)"],[2341,42,47,"String"],[2342,6,37,"toLowerCase(Locale.getDefault())"],[2348,7,27,"\"TITLE\".toLowerCase()"],[2348,57,68,"\"t\\u0131tle\""],[2349,80,103,"toLowerCase(Locale.ROOT)"],[2353,11,16,"String"],[2357,9,27,"toLowerCase(Locale)"],[2364,42,47,"String"],[2364,92,97,"Locale"],[2365,49,57,"Character"],[2366,13,18,"String"],[2366,29,34,"String"],[2381,7,12,"locale"],[2385,11,16,"String"],[2393,9,21,"toUpperCase()"],[2394,9,21,"toLowerCase()"],[2395,9,27,"toLowerCase(Locale)"],[2402,42,47,"String"],[2403,6,37,"toUpperCase(Locale.getDefault())"],[2409,7,27,"\"title\".toUpperCase()"],[2409,57,68,"\"T\\u0130TLE\""],[2410,86,109,"toUpperCase(Locale.ROOT)"],[2414,11,16,"String"],[2418,9,27,"toUpperCase(Locale)"],[2426,54,61,"'U+0020'"],[2428,11,16,"String"],[2429,23,28,"String"],[2429,117,122,"String"],[2432,84,89,"String"],[2436,100,105,"String"],[2438,28,51,"this.substring(k, m + 1)"],[2454,11,16,"String"],[2472,9,35,"Character.isWhitespace(int)"],[2481,11,16,"String"],[2499,9,35,"Character.isWhitespace(int)"],[2508,11,16,"String"],[2526,9,35,"Character.isWhitespace(int)"],[2533,11,14,"true"],[2533,90,94,"false"],[2537,7,10,"true"],[2537,86,90,"false"],[2545,9,35,"Character.isWhitespace(int)"],[2554,68,71,"\"\\n\""],[2554,111,114,"\"\\r\""],[2555,70,75,"\"\\r\\n\""],[2585,77,77,"n"],[2587,58,64,"lines()"],[2588,29,32,"\"\\n\""],[2590,6,10,"n > 0"],[2590,17,17,"n"],[2592,6,10,"n < 0"],[2592,23,23,"n"],[2594,56,59,"\"\\t\""],[2596,6,11,"n == 0"],[2600,7,7,"n"],[2612,9,15,"lines()"],[2613,9,17,"isBlank()"],[2614,9,35,"Character.isWhitespace(int)"],[2651,44,52,"isBlank()"],[2660,75,78,"\"\\n\""],[2684,9,15,"lines()"],[2685,9,17,"isBlank()"],[2686,9,19,"indent(int)"],[2687,9,35,"Character.isWhitespace(int)"],[2716,63,68,"\\u2022"],[2725,7,30,"IllegalArgumentException"],[2740,55,58,"this"],[2741,14,14,"R"],[2743,27,35,"f.apply()"],[2747,7,7,"R"],[2751,7,7,"f"],[2763,9,16,"Function"],[2774,7,14,"toString"],[2774,29,40,"CharSequence"],[2778,7,14,"toString"],[2778,25,30,"Object"],[2789,23,25,"int"],[2789,46,49,"char"],[2794,7,11,"chars"],[2794,26,37,"CharSequence"],[2811,71,73,"int"],[2815,7,16,"codePoints"],[2815,31,42,"CharSequence"],[2844,49,82,"Locale.getDefault(Locale.Category)"],[2844,89,94,"FORMAT"],[2848,7,12,"format"],[2849,7,10,"args"],[2852,22,25,"null"],[2860,7,28,"IllegalFormatException"],[2870,9,17,"Formatter"],[2881,7,7,"l"],[2881,53,53,"l"],[2881,58,61,"null"],[2882,7,12,"format"],[2883,7,10,"args"],[2886,22,25,"null"],[2894,7,28,"IllegalFormatException"],[2904,9,17,"Formatter"],[2915,36,60,"String.format(this, args)"],[2919,7,10,"args"],[2931,9,32,"format(String,Object...)"],[2932,9,17,"Formatter"],[2939,44,49,"Object"],[2943,7,9,"obj"],[2943,16,21,"Object"],[2947,26,29,"null"],[2947,55,60,"\"null\""],[2947,87,100,"obj.toString()"],[2951,9,25,"Object.toString()"],[2958,44,47,"char"],[2963,7,10,"data"],[2967,9,14,"String"],[2974,67,70,"char"],[2976,7,12,"offset"],[2976,80,84,"count"],[2982,7,10,"data"],[2983,7,12,"offset"],[2984,7,11,"count"],[2988,9,14,"String"],[2992,7,31,"IndexOutOfBoundsException"],[2992,38,43,"offset"],[2992,61,65,"count"],[2992,83,94,"offset+count"],[2993,7,17,"data.length"],[3000,17,41,"valueOf(char[], int, int)"],[3004,7,10,"data"],[3005,7,12,"offset"],[3006,7,11,"count"],[3010,9,14,"String"],[3014,7,31,"IndexOutOfBoundsException"],[3014,38,43,"offset"],[3014,61,65,"count"],[3014,83,94,"offset+count"],[3015,7,17,"data.length"],[3022,17,31,"valueOf(char[])"],[3026,7,10,"data"],[3030,9,14,"String"],[3037,44,50,"boolean"],[3041,7,7,"b"],[3041,13,19,"boolean"],[3045,26,29,"true"],[3045,50,55,"\"true\""],[3045,99,105,"\"false\""],[3052,44,47,"char"],[3056,7,7,"c"],[3056,13,16,"char"],[3060,26,26,"1"],[3060,76,76,"c"],[3067,44,46,"int"],[3069,57,72,"Integer.toString"],[3073,7,7,"i"],[3073,14,16,"int"],[3077,38,40,"int"],[3081,9,34,"Integer.toString(int, int)"],[3088,44,47,"long"],[3090,57,69,"Long.toString"],[3094,7,7,"l"],[3094,13,16,"long"],[3098,38,41,"long"],[3102,9,27,"Long.toString(long)"],[3109,44,48,"float"],[3111,57,70,"Float.toString"],[3115,7,7,"f"],[3115,13,17,"float"],[3119,38,42,"float"],[3123,9,29,"Float.toString(float)"],[3130,44,49,"double"],[3132,57,71,"Double.toString"],[3136,7,7,"d"],[3136,13,18,"double"],[3140,38,43,"double"],[3144,9,31,"Double.toString(double)"],[3153,76,81,"String"],[3155,90,95,"String"],[3156,3,16,"equals(Object)"],[3156,85,90,"String"],[3157,23,28,"String"],[3159,39,39,"s"],[3159,45,45,"t"],[3159,48,71,"s.intern() == t.intern()"],[3159,76,79,"true"],[3159,96,106,"s.equals(t)"],[3159,111,114,"true"],[3173,77,81,"count"],[3179,7,11,"count"],[3183,49,53,"count"],[3187,7,30,"IllegalArgumentException"],[3187,41,45,"count"],[3198,14,21,"Optional"],[3202,7,23,"describeConstable"],[3202,38,46,"Constable"],[3206,10,17,"Optional"],[3217,31,42,"ConstantDesc"],[3221,7,25,"resolveConstantDesc"],[3221,40,51,"ConstantDesc"],[3225,7,12,"lookup"]],"codeblock":[[12,12],[20,20],[24,25],[29,33],[481,481],[502,502],[510,510],[523,523],[536,536],[556,556],[582,582],[621,621],[631,632],[651,651],[679,679],[706,706],[730,730],[750,750],[776,776],[795,795],[807,807],[830,830],[845,845],[864,864],[890,890],[918,918],[946,946],[973,973],[1000,1000],[1008,1008],[1030,1030],[1045,1045],[1067,1067],[1093,1093],[1115,1115],[1133,1133],[1160,1160],[1182,1182],[1205,1205],[1234,1234],[1248,1248],[1253,1253],[1274,1274],[1304,1304],[1337,1337],[1378,1378],[1393,1393],[1398,1398],[1419,1419],[1436,1436],[1440,1440],[1461,1461],[1467,1467],[1471,1471],[1487,1487],[1496,1496],[1500,1500],[1531,1531],[1540,1540],[1544,1544],[1574,1574],[1579,1579],[1583,1583],[1600,1600],[1606,1606],[1610,1610],[1631,1631],[1637,1637],[1652,1652],[1658,1659],[1684,1684],[1690,1690],[1717,1717],[1724,1724],[1739,1739],[1746,1747],[1764,1764],[1771,1773],[1790,1790],[1797,1798],[1817,1817],[1823,1823],[1827,1827],[1858,1858],[1868,1869],[1882,1882],[1893,1899],[1913,1913],[1944,1944],[1963,1963],[2000,2000],[2037,2037],[2059,2059],[2123,2123],[2183,2183],[2222,2222],[2229,2230],[2258,2258],[2265,2272],[2301,2301],[2339,2339],[2362,2362],[2400,2400],[2423,2423],[2450,2450],[2477,2477],[2504,2504],[2531,2531],[2550,2550],[2583,2583],[2619,2619],[2626,2632],[2637,2641],[2692,2692],[2738,2738],[2768,2768],[2787,2787],[2807,2807],[2828,2828],[2840,2840],[2875,2875],[2909,2909],[2937,2937],[2956,2956],[2972,2972],[2998,2998],[3020,3020],[3035,3035],[3050,3050],[3065,3065],[3086,3086],[3107,3107],[3128,3128],[3149,3149],[3171,3171],[3196,3196],[3215,3215]],"defn":[8,55,63,67,71,488,492,516,529,542,548,563,569,575,596,603,608,634,639,659,666,672,687,694,699,714,719,723,738,743,758,764,769,784,788,800,816,820,834,838,849,853,857,871,875,879,883,899,903,907,911,927,931,935,939,952,957,961,966,978,983,987,993,1010,1017,1047,1054,1074,1078,1082,1086,1100,1104,1108,1122,1126,1140,1144,1148,1152,1167,1171,1175,1190,1194,1198,1218,1222,1226,1257,1261,1265,1283,1287,1292,1296,1322,1329,1358,1366,1371,1382,1387,1402,1406,1412,1423,1427,1445,1449,1453,1475,1479,1510,1518,1523,1551,1557,1562,1567,1588,1592,1616,1623,1641,1645,1663,1671,1676,1694,1700,1705,1710,1728,1732,1751,1756,1775,1779,1783,1800,1805,1809,1829,1833,1837,1842,1846,1851,1871,1875,1901,1906,1921,1925,1929,1933,1937,1948,1952,1956,1976,1981,1985,1989,1993,2013,2018,2022,2026,2030,2043,2048,2052,2099,2104,2108,2112,2116,2159,2166,2171,2176,2199,2203,2207,2211,2215,2234,2239,2243,2247,2251,2276,2281,2285,2289,2293,2318,2322,2326,2330,2344,2351,2355,2379,2383,2387,2391,2405,2412,2416,2442,2462,2466,2470,2489,2493,2497,2516,2520,2524,2535,2539,2543,2562,2567,2572,2576,2598,2602,2606,2610,2662,2669,2674,2678,2682,2714,2719,2723,2727,2731,2745,2749,2753,2757,2761,2772,2776,2780,2792,2796,2800,2813,2817,2821,2832,2846,2854,2858,2864,2868,2879,2888,2892,2898,2902,2913,2917,2921,2925,2929,2941,2945,2949,2961,2965,2980,2986,2990,3002,3008,3012,3024,3028,3039,3043,3054,3058,3071,3075,3079,3092,3096,3100,3113,3117,3121,3134,3138,3142,3164,3177,3181,3185,3189,3200,3204,3208,3219,3223,3227,3231],"doc":["  ═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════ §1\n","  Class String\n","\n","  java.lang.Object\n","\n","  java.lang.String\n","\n","  All Implemented Interfaces:\n","\n","      Serializable, CharSequence, Comparable<String>, Constable, ConstantDesc\n","\n","      public final class String extends Object implements Serializable, Comparable<String>, CharSequence, Constable, ConstantDesc\n","\n","  The String class represents character strings. All string literals in Java programs, such as \"abc\", are implemented as\n","  instances of this class.\n","\n","  Strings are constant; their values cannot be changed after they are created. String buffers support mutable strings. Because\n","  String objects are immutable they can be shared. For example:\n","\n","           String str = \"abc\";\n","\n","  is equivalent to:\n","\n","           char data[] = {'a', 'b', 'c'};\n","           String str = new String(data);\n","\n","  Here are some more examples of how strings can be used:\n","\n","           System.out.println(\"abc\");\n","           String cde = \"cde\";\n","           System.out.println(\"abc\" + cde);\n","           String c = \"abc\".substring(2, 3);\n","           String d = cde.substring(1, 2);\n","\n","  The class String includes methods for examining individual characters of the sequence, for comparing strings, for searching\n","  strings, for extracting substrings, and for creating a copy of a string with all characters translated to uppercase or to\n","  lowercase. Case mapping is based on the Unicode Standard version specified by the Character class.\n","\n","  The Java language provides special support for the string concatenation operator ( + ), and for conversion of other objects to\n","  strings. For additional information on string concatenation and conversion, see The Java Language Specification.\n","\n","  Unless otherwise noted, passing a null argument to a constructor or method in this class will cause a\n","  NullPointerException to be thrown.\n","\n","  A String represents a string in the UTF-16 format in which supplementary characters are represented by surrogate pairs\n","  (see the section Unicode Character Representations in the Character class for more information). Index values refer to\n","  char code units, so a supplementary character uses two positions in a String.\n","\n","  The String class provides methods for dealing with Unicode code points (i.e., characters), in addition to those for dealing\n","  with Unicode code units (i.e., char values).\n","\n","  Unless otherwise noted, methods for comparing Strings do not take locale into account. The Collator class provides methods\n","  for finer-grain, locale-sensitive String comparison.\n","\n","  Implementation Note:\n","\n","      The implementation of the string concatenation operator is left to the discretion of a Java compiler, as long as the\n","      compiler ultimately conforms to The Java Language Specification. For example, the javac compiler may implement the\n","      operator with StringBuffer, StringBuilder, or java.lang.invoke.StringConcatFactory depending on the JDK version. The\n","      implementation of string conversion is typically through the method toString, defined by Object and inherited by all\n","      classes in Java.\n","\n","  See Java Language Specification:\n","\n","      15.18.1 String Concatenation Operator +\n","\n","  Since:\n","\n","      1.0\n","\n","  See Also:\n","\n","      - Object.toString()\n","      - StringBuffer\n","      - StringBuilder\n","      - Charset\n","      - Serialized Form\n","\n","  ——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.1\n","  Field Summary\n","\n","  ┌────────────────────────────────────────┬────────────────────────────────────────┬────────────────────────────────────────┐\n","  │ Modifier and Type                      │ Field                                  │ Description                            │\n","  ╞════════════════════════════════════════╪════════════════════════════════════════╪════════════════════════════════════════╡\n","  │ static final Comparator<String>        │ CASE_INSENSITIVE_ORDER                 │ A Comparator that orders String        │\n","  │                                        │                                        │ objects as by compareToIgnoreCase.     │\n","  └────────────────────────────────────────┴────────────────────────────────────────┴────────────────────────────────────────┘\n","\n","  ——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.2\n","  Constructor Summary\n","\n","  ┌─────────────────────────────────────────────────────────────┬─────────────────────────────────────────────────────────────┐\n","  │ Constructor                                                 │ Description                                                 │\n","  ╞═════════════════════════════════════════════════════════════╪═════════════════════════════════════════════════════════════╡\n","  │ String()                                                    │ Initializes a newly created String object so that it        │\n","  │                                                             │ represents an empty character sequence.                     │\n","  ├─────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────┤\n","  │ String(byte[] bytes)                                        │ Constructs a new String by decoding the specified array of  │\n","  │                                                             │ bytes using the default charset.                            │\n","  ├─────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────┤\n","  │ String(byte[] ascii, int hibyte)                            │ Deprecated. This method does not properly convert bytes     │\n","  │                                                             │ into characters.                                            │\n","  ├─────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────┤\n","  │ String(byte[] bytes, int offset, int length)                │ Constructs a new String by decoding the specified subarray  │\n","  │                                                             │ of bytes using the default charset.                         │\n","  ├─────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────┤\n","  │ String(byte[] ascii, int hibyte, int offset, int count)     │ Deprecated. This method does not properly convert bytes     │\n","  │                                                             │ into characters.                                            │\n","  ├─────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────┤\n","  │ String(byte[] bytes, int offset, int length,                │ Constructs a new String by decoding the specified subarray  │\n","  │ String charsetName)                                         │ of bytes using the specified charset.                       │\n","  ├─────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────┤\n","  │ String(byte[] bytes, int offset, int length,                │ Constructs a new String by decoding the specified subarray  │\n","  │ Charset charset)                                            │ of bytes using the specified charset.                       │\n","  ├─────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────┤\n","  │ String(byte[] bytes, String charsetName)                    │ Constructs a new String by decoding the specified array of  │\n","  │                                                             │ bytes using the specified charset.                          │\n","  ├─────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────┤\n","  │ String(byte[] bytes, Charset charset)                       │ Constructs a new String by decoding the specified array of  │\n","  │                                                             │ bytes using the specified charset.                          │\n","  ├─────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────┤\n","  │ String(char[] value)                                        │ Allocates a new String so that it represents the sequence   │\n","  │                                                             │ of characters currently contained in the character array    │\n","  │                                                             │ argument.                                                   │\n","  ├─────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────┤\n","  │ String(char[] value, int offset, int count)                 │ Allocates a new String that contains characters from a      │\n","  │                                                             │ subarray of the character array argument.                   │\n","  ├─────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────┤\n","  │ String(int[] codePoints, int offset, int count)             │ Allocates a new String that contains characters from a      │\n","  │                                                             │ subarray of the Unicode code point array argument.          │\n","  ├─────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────┤\n","  │ String(String original)                                     │ Initializes a newly created String object so that it        │\n","  │                                                             │ represents the same sequence of characters as the argument; │\n","  │                                                             │ in other words, the newly created string is a copy of the   │\n","  │                                                             │ argument string.                                            │\n","  ├─────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────┤\n","  │ String(StringBuffer buffer)                                 │ Allocates a new string that contains the sequence of        │\n","  │                                                             │ characters currently contained in the string buffer         │\n","  │                                                             │ argument.                                                   │\n","  ├─────────────────────────────────────────────────────────────┼─────────────────────────────────────────────────────────────┤\n","  │ String(StringBuilder builder)                               │ Allocates a new string that contains the sequence of        │\n","  │                                                             │ characters currently contained in the string builder        │\n","  │                                                             │ argument.                                                   │\n","  └─────────────────────────────────────────────────────────────┴─────────────────────────────────────────────────────────────┘\n","\n","  ——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.3\n","  Method Summary\n","\n","  ┌────────────────────────────────────────┬────────────────────────────────────────┬────────────────────────────────────────┐\n","  │ Modifier and Type                      │ Method                                 │ Description                            │\n","  ╞════════════════════════════════════════╪════════════════════════════════════════╪════════════════════════════════════════╡\n","  │ char                                   │ charAt(int index)                      │ Returns the char value at the          │\n","  │                                        │                                        │ specified index.                       │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ IntStream                              │ chars()                                │ Returns a stream of int zero-extending │\n","  │                                        │                                        │ the char values from this sequence.    │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ int                                    │ codePointAt(int index)                 │ Returns the character (Unicode code    │\n","  │                                        │                                        │ point) at the specified index.         │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ int                                    │ codePointBefore(int index)             │ Returns the character (Unicode code    │\n","  │                                        │                                        │ point) before the specified index.     │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ int                                    │ codePointCount(int beginIndex,         │ Returns the number of Unicode code     │\n","  │                                        │ int endIndex)                          │ points in the specified text range of  │\n","  │                                        │                                        │ this String.                           │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ IntStream                              │ codePoints()                           │ Returns a stream of code point values  │\n","  │                                        │                                        │ from this sequence.                    │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ int                                    │ compareTo(String anotherString)        │ Compares two strings                   │\n","  │                                        │                                        │ lexicographically.                     │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ int                                    │ compareToIgnoreCase(String str)        │ Compares two strings                   │\n","  │                                        │                                        │ lexicographically, ignoring case       │\n","  │                                        │                                        │ differences.                           │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ concat(String str)                     │ Concatenates the specified string to   │\n","  │                                        │                                        │ the end of this string.                │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ boolean                                │ contains(CharSequence s)               │ Returns true if and only if this       │\n","  │                                        │                                        │ string contains the specified sequence │\n","  │                                        │                                        │ of char values.                        │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ boolean                                │ contentEquals(CharSequence cs)         │ Compares this string to the specified  │\n","  │                                        │                                        │ CharSequence.                          │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ boolean                                │ contentEquals(StringBuffer sb)         │ Compares this string to the specified  │\n","  │                                        │                                        │ StringBuffer.                          │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ static String                          │ copyValueOf(char[] data)               │ Equivalent to valueOf(char[]).         │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ static String                          │ copyValueOf(char[] data, int offset,   │ Equivalent to valueOf(char[], int,     │\n","  │                                        │ int count)                             │ int).                                  │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ Optional<String>                       │ describeConstable()                    │ Returns an Optional containing the     │\n","  │                                        │                                        │ nominal descriptor for this instance,  │\n","  │                                        │                                        │ which is the instance itself.          │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ boolean                                │ endsWith(String suffix)                │ Tests if this string ends with the     │\n","  │                                        │                                        │ specified suffix.                      │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ boolean                                │ equals(Object anObject)                │ Compares this string to the specified  │\n","  │                                        │                                        │ object.                                │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ boolean                                │ equalsIgnoreCase(String anotherString) │ Compares this String to another        │\n","  │                                        │                                        │ String, ignoring case considerations.  │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ static String                          │ format(String format, Object... args)  │ Returns a formatted string using the   │\n","  │                                        │                                        │ specified format string and arguments. │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ static String                          │ format(Locale l, String format,        │ Returns a formatted string using the   │\n","  │                                        │ Object... args)                        │ specified locale, format string, and   │\n","  │                                        │                                        │ arguments.                             │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ formatted(Object... args)              │ Formats using this string as the       │\n","  │                                        │                                        │ format string, and the supplied        │\n","  │                                        │                                        │ arguments.                             │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ byte[]                                 │ getBytes()                             │ Encodes this String into a sequence of │\n","  │                                        │                                        │ bytes using the default charset,       │\n","  │                                        │                                        │ storing the result into a new byte     │\n","  │                                        │                                        │ array.                                 │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ void                                   │ getBytes(int srcBegin, int srcEnd,     │ Deprecated. This method does not       │\n","  │                                        │ byte[] dst, int dstBegin)              │ properly convert characters into       │\n","  │                                        │                                        │ bytes.                                 │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ byte[]                                 │ getBytes(String charsetName)           │ Encodes this String into a sequence of │\n","  │                                        │                                        │ bytes using the named charset, storing │\n","  │                                        │                                        │ the result into a new byte array.      │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ byte[]                                 │ getBytes(Charset charset)              │ Encodes this String into a sequence of │\n","  │                                        │                                        │ bytes using the given charset, storing │\n","  │                                        │                                        │ the result into a new byte array.      │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ void                                   │ getChars(int srcBegin, int srcEnd,     │ Copies characters from this string     │\n","  │                                        │ char[] dst, int dstBegin)              │ into the destination character array.  │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ int                                    │ hashCode()                             │ Returns a hash code for this string.   │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ indent(int n)                          │ Adjusts the indentation of each line   │\n","  │                                        │                                        │ of this string based on the value of   │\n","  │                                        │                                        │ n, and normalizes line termination     │\n","  │                                        │                                        │ characters.                            │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ int                                    │ indexOf(int ch)                        │ Returns the index within this string   │\n","  │                                        │                                        │ of the first occurrence of the         │\n","  │                                        │                                        │ specified character.                   │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ int                                    │ indexOf(int ch, int fromIndex)         │ Returns the index within this string   │\n","  │                                        │                                        │ of the first occurrence of the         │\n","  │                                        │                                        │ specified character, starting the      │\n","  │                                        │                                        │ search at the specified index.         │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ int                                    │ indexOf(int ch, int beginIndex,        │ Returns the index within this string   │\n","  │                                        │ int endIndex)                          │ of the first occurrence of the         │\n","  │                                        │                                        │ specified character, starting the      │\n","  │                                        │                                        │ search at beginIndex and stopping      │\n","  │                                        │                                        │ before endIndex.                       │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ int                                    │ indexOf(String str)                    │ Returns the index within this string   │\n","  │                                        │                                        │ of the first occurrence of the         │\n","  │                                        │                                        │ specified substring.                   │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ int                                    │ indexOf(String str, int fromIndex)     │ Returns the index within this string   │\n","  │                                        │                                        │ of the first occurrence of the         │\n","  │                                        │                                        │ specified substring, starting at the   │\n","  │                                        │                                        │ specified index.                       │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ int                                    │ indexOf(String str, int beginIndex,    │ Returns the index of the first         │\n","  │                                        │ int endIndex)                          │ occurrence of the specified substring  │\n","  │                                        │                                        │ within the specified index range of    │\n","  │                                        │                                        │ this string.                           │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ intern()                               │ Returns a canonical representation for │\n","  │                                        │                                        │ the string object.                     │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ boolean                                │ isBlank()                              │ Returns true if the string is empty or │\n","  │                                        │                                        │ contains only white space codepoints,  │\n","  │                                        │                                        │ otherwise false.                       │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ boolean                                │ isEmpty()                              │ Returns true if, and only if, length() │\n","  │                                        │                                        │ is 0.                                  │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ static String                          │ join(CharSequence delimiter,           │ Returns a new String composed of       │\n","  │                                        │ CharSequence... elements)              │ copies of the CharSequence elements    │\n","  │                                        │                                        │ joined together with a copy of the     │\n","  │                                        │                                        │ specified delimiter.                   │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ static String                          │ join(CharSequence delimiter,           │ Returns a new String composed of       │\n","  │                                        │ Iterable<? extends                     │ copies of the CharSequence elements    │\n","  │                                        │ CharSequence> elements)                │ joined together with a copy of the     │\n","  │                                        │                                        │ specified delimiter.                   │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ int                                    │ lastIndexOf(int ch)                    │ Returns the index within this string   │\n","  │                                        │                                        │ of the last occurrence of the          │\n","  │                                        │                                        │ specified character.                   │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ int                                    │ lastIndexOf(int ch, int fromIndex)     │ Returns the index within this string   │\n","  │                                        │                                        │ of the last occurrence of the          │\n","  │                                        │                                        │ specified character, searching         │\n","  │                                        │                                        │ backward starting at the specified     │\n","  │                                        │                                        │ index.                                 │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ int                                    │ lastIndexOf(String str)                │ Returns the index within this string   │\n","  │                                        │                                        │ of the last occurrence of the          │\n","  │                                        │                                        │ specified substring.                   │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ int                                    │ lastIndexOf(String str, int fromIndex) │ Returns the index within this string   │\n","  │                                        │                                        │ of the last occurrence of the          │\n","  │                                        │                                        │ specified substring, searching         │\n","  │                                        │                                        │ backward starting at the specified     │\n","  │                                        │                                        │ index.                                 │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ int                                    │ length()                               │ Returns the length of this string.     │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ Stream<String>                         │ lines()                                │ Returns a stream of lines extracted    │\n","  │                                        │                                        │ from this string, separated by line    │\n","  │                                        │                                        │ terminators.                           │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ boolean                                │ matches(String regex)                  │ Tells whether or not this string       │\n","  │                                        │                                        │ matches the given regular expression.  │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ int                                    │ offsetByCodePoints(int index,          │ Returns the index within this String   │\n","  │                                        │ int codePointOffset)                   │ that is offset from the given index by │\n","  │                                        │                                        │ codePointOffset code points.           │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ boolean                                │ regionMatches(boolean ignoreCase,      │ Tests if two string regions are equal. │\n","  │                                        │ int toffset, String other,             │                                        │\n","  │                                        │ int ooffset, int len)                  │                                        │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ boolean                                │ regionMatches(int toffset,             │ Tests if two string regions are equal. │\n","  │                                        │ String other, int ooffset, int len)    │                                        │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ repeat(int count)                      │ Returns a string whose value is the    │\n","  │                                        │                                        │ concatenation of this string repeated  │\n","  │                                        │                                        │ count times.                           │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ replace(char oldChar, char newChar)    │ Returns a string resulting from        │\n","  │                                        │                                        │ replacing all occurrences of oldChar   │\n","  │                                        │                                        │ in this string with newChar.           │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ replace(CharSequence target,           │ Replaces each substring of this string │\n","  │                                        │ CharSequence replacement)              │ that matches the literal target        │\n","  │                                        │                                        │ sequence with the specified literal    │\n","  │                                        │                                        │ replacement sequence.                  │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ replaceAll(String regex,               │ Replaces each substring of this string │\n","  │                                        │ String replacement)                    │ that matches the given regular         │\n","  │                                        │                                        │ expression with the given replacement. │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ replaceFirst(String regex,             │ Replaces the first substring of this   │\n","  │                                        │ String replacement)                    │ string that matches the given regular  │\n","  │                                        │                                        │ expression with the given replacement. │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ resolveCon                             │ Resolves this instance as a            │\n","  │                                        │ stantDesc(MethodHandles.Lookup lookup) │ ConstantDesc, the result of which is   │\n","  │                                        │                                        │ the instance itself.                   │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String[]                               │ split(String regex)                    │ Splits this string around matches of   │\n","  │                                        │                                        │ the given regular expression.          │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String[]                               │ split(String regex, int limit)         │ Splits this string around matches of   │\n","  │                                        │                                        │ the given regular expression.          │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String[]                               │ splitWithDelimiters(String regex,      │ Splits this string around matches of   │\n","  │                                        │ int limit)                             │ the given regular expression and       │\n","  │                                        │                                        │ returns both the strings and the       │\n","  │                                        │                                        │ matching delimiters.                   │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ boolean                                │ startsWith(String prefix)              │ Tests if this string starts with the   │\n","  │                                        │                                        │ specified prefix.                      │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ boolean                                │ startsWith(String prefix, int toffset) │ Tests if the substring of this string  │\n","  │                                        │                                        │ beginning at the specified index       │\n","  │                                        │                                        │ starts with the specified prefix.      │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ strip()                                │ Returns a string whose value is this   │\n","  │                                        │                                        │ string, with all leading and trailing  │\n","  │                                        │                                        │ white space removed.                   │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ stripIndent()                          │ Returns a string whose value is this   │\n","  │                                        │                                        │ string, with incidental white space    │\n","  │                                        │                                        │ removed from the beginning and end of  │\n","  │                                        │                                        │ every line.                            │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ stripLeading()                         │ Returns a string whose value is this   │\n","  │                                        │                                        │ string, with all leading white space   │\n","  │                                        │                                        │ removed.                               │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ stripTrailing()                        │ Returns a string whose value is this   │\n","  │                                        │                                        │ string, with all trailing white space  │\n","  │                                        │                                        │ removed.                               │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ CharSequence                           │ subSequence(int beginIndex,            │ Returns a character sequence that is a │\n","  │                                        │ int endIndex)                          │ subsequence of this sequence.          │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ substring(int beginIndex)              │ Returns a string that is a substring   │\n","  │                                        │                                        │ of this string.                        │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ substring(int beginIndex,              │ Returns a string that is a substring   │\n","  │                                        │ int endIndex)                          │ of this string.                        │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ char[]                                 │ toCharArray()                          │ Converts this string to a new          │\n","  │                                        │                                        │ character array.                       │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ toLowerCase()                          │ Converts all of the characters in this │\n","  │                                        │                                        │ String to lower case using the rules   │\n","  │                                        │                                        │ of the default locale.                 │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ toLowerCase(Locale locale)             │ Converts all of the characters in this │\n","  │                                        │                                        │ String to lower case using the rules   │\n","  │                                        │                                        │ of the given Locale.                   │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ toString()                             │ This object (which is already a        │\n","  │                                        │                                        │ string!)                               │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ toUpperCase()                          │ Converts all of the characters in this │\n","  │                                        │                                        │ String to upper case using the rules   │\n","  │                                        │                                        │ of the default locale.                 │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ toUpperCase(Locale locale)             │ Converts all of the characters in this │\n","  │                                        │                                        │ String to upper case using the rules   │\n","  │                                        │                                        │ of the given Locale.                   │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ <R> R                                  │ transform(Function<? super String,?    │ This method allows the application of  │\n","  │                                        │ extends R> f)                          │ a function to this string.             │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ translateEscapes()                     │ Returns a string whose value is this   │\n","  │                                        │                                        │ string, with escape sequences          │\n","  │                                        │                                        │ translated as if in a string literal.  │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ String                                 │ trim()                                 │ Returns a string whose value is this   │\n","  │                                        │                                        │ string, with all leading and trailing  │\n","  │                                        │                                        │ space removed, where space is defined  │\n","  │                                        │                                        │ as any character whose codepoint is    │\n","  │                                        │                                        │ less than or equal to 'U+0020' (the    │\n","  │                                        │                                        │ space character).                      │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ static String                          │ valueOf(boolean b)                     │ Returns the string representation of   │\n","  │                                        │                                        │ the boolean argument.                  │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ static String                          │ valueOf(char c)                        │ Returns the string representation of   │\n","  │                                        │                                        │ the char argument.                     │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ static String                          │ valueOf(char[] data)                   │ Returns the string representation of   │\n","  │                                        │                                        │ the char array argument.               │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ static String                          │ valueOf(char[] data, int offset,       │ Returns the string representation of a │\n","  │                                        │ int count)                             │ specific subarray of the char array    │\n","  │                                        │                                        │ argument.                              │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ static String                          │ valueOf(double d)                      │ Returns the string representation of   │\n","  │                                        │                                        │ the double argument.                   │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ static String                          │ valueOf(float f)                       │ Returns the string representation of   │\n","  │                                        │                                        │ the float argument.                    │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ static String                          │ valueOf(int i)                         │ Returns the string representation of   │\n","  │                                        │                                        │ the int argument.                      │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ static String                          │ valueOf(long l)                        │ Returns the string representation of   │\n","  │                                        │                                        │ the long argument.                     │\n","  ├────────────────────────────────────────┼────────────────────────────────────────┼────────────────────────────────────────┤\n","  │ static String                          │ valueOf(Object obj)                    │ Returns the string representation of   │\n","  │                                        │                                        │ the Object argument.                   │\n","  └────────────────────────────────────────┴────────────────────────────────────────┴────────────────────────────────────────┘\n","\n","  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.3.1\n","  Methods declared in class java.lang.Object\n","\n","  clone, finalize, getClass, notify, notifyAll, wait, wait, wait\n","\n","  ——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.4\n","  Field Details\n","\n","  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.4.1\n","  CASE_INSENSITIVE_ORDER\n","\n","      public static final Comparator<String> CASE_INSENSITIVE_ORDER\n","\n","  A Comparator that orders String objects as by compareToIgnoreCase. This comparator is serializable.\n","\n","  Note that this Comparator does not take locale into account, and will result in an unsatisfactory ordering for certain\n","  locales. The Collator class provides locale-sensitive comparison.\n","\n","  Since:\n","\n","      1.2\n","\n","  See Also:\n","\n","      - Collator\n","\n","  ——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.5\n","  Constructor Details\n","\n","  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.5.1\n","  String\n","\n","      public String()\n","\n","  Initializes a newly created String object so that it represents an empty character sequence. Note that use of this\n","  constructor is unnecessary since Strings are immutable.\n","\n","  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.5.2\n","  String\n","\n","      public String(String original)\n","\n","  Initializes a newly created String object so that it represents the same sequence of characters as the argument; in other\n","  words, the newly created string is a copy of the argument string. Unless an explicit copy of original is needed, use of this\n","  constructor is unnecessary since Strings are immutable.\n","\n","  Parameters:\n","\n","      original - A String\n","\n","  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.5.3\n","  String\n","\n","      public String(char[] value)\n","\n","  Allocates a new String so that it represents the sequence of characters currently contained in the character array argument.\n","  The contents of the character array are copied; subsequent modification of the character array does not affect the newly\n","  created string.\n","\n","  Parameters:\n","\n","      value - The initial value of the string\n","\n","  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.5.4\n","  String\n","\n","      public String(char[] value, int offset, int count)\n","\n","  Allocates a new String that contains characters from a subarray of the character array argument. The offset argument is the\n","  index of the first character of the subarray and the count argument specifies the length of the subarray. The contents of the\n","  subarray are copied; subsequent modification of the character array does not affect the newly created string.\n","\n","  Parameters:\n","\n","      value - Array that is the source of characters\n","      offset - The initial offset\n","      count - The length\n","\n","  Throws:\n","\n","      IndexOutOfBoundsException - If offset is negative, count is negative, or offset is greater than\n","      value.length - count\n","\n","  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.5.5\n","  String\n","\n","      public String(int[] codePoints, int offset, int count)\n","\n","  Allocates a new String that contains characters from a subarray of the Unicode code point array argument. The offset\n","  argument is the index of the first code point of the subarray and the count argument specifies the length of the subarray.\n","  The contents of the subarray are converted to chars; subsequent modification of the int array does not affect the newly\n","  created string.\n","\n","  Parameters:\n","\n","      codePoints - Array that is the source of Unicode code points\n","      offset - The initial offset\n","      count - The length\n","\n","  Throws:\n","\n","      IllegalArgumentException - If any invalid Unicode code point is found in  codePoints\n","      IndexOutOfBoundsException - If offset is negative, count is negative, or offset is greater than\n","      codePoints.length - count\n","\n","  Since:\n","\n","      1.5\n","\n","  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.5.6\n","  String\n","\n","      @Deprecated(since=\"1.1\") public String(byte[] ascii, int hibyte, int offset, int count)\n","\n","  Deprecated.\n","\n","  This method does not properly convert bytes into characters. As of JDK 1.1, the preferred way to do this is via the String\n","  constructors that take a Charset, charset name, or that use the default charset.\n","\n","  Allocates a new String constructed from a subarray of an array of 8-bit integer values.\n","\n","  The offset argument is the index of the first byte of the subarray, and the count argument specifies the length of the\n","  subarray.\n","\n","  Each byte in the subarray is converted to a char as specified in the String(byte[],int) constructor.\n","\n","  Parameters:\n","\n","      ascii - The bytes to be converted to characters\n","      hibyte - The top 8 bits of each 16-bit Unicode code unit\n","      offset - The initial offset\n","      count - The length\n","\n","  Throws:\n","\n","      IndexOutOfBoundsException - If offset is negative, count is negative, or offset is greater than\n","      ascii.length - count\n","\n","  See Also:\n","\n","      - String(byte[], int)\n","      - String(byte[], int, int, java.lang.String)\n","      - String(byte[], int, int, java.nio.charset.Charset)\n","      - String(byte[], int, int)\n","      - String(byte[], java.lang.String)\n","      - String(byte[], java.nio.charset.Charset)\n","      - String(byte[])\n","\n","  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.5.7\n","  String\n","\n","      @Deprecated(since=\"1.1\") public String(byte[] ascii, int hibyte)\n","\n","  Deprecated.\n","\n","  This method does not properly convert bytes into characters. As of JDK 1.1, the preferred way to do this is via the String\n","  constructors that take a Charset, charset name, or that use the default charset.\n","\n","  Allocates a new String containing characters constructed from an array of 8-bit integer values. Each character c in the\n","  resulting string is constructed from the corresponding component b in the byte array such that:\n","\n","           c == (char)(((hibyte & 0xff) << 8)\n","                               | (b & 0xff))\n","\n","  Parameters:\n","\n","      ascii - The bytes to be converted to characters\n","      hibyte - The top 8 bits of each 16-bit Unicode code unit\n","\n","  See Also:\n","\n","      - String(byte[], int, int, java.lang.String)\n","      - String(byte[], int, int, java.nio.charset.Charset)\n","      - String(byte[], int, int)\n","      - String(byte[], java.lang.String)\n","      - String(byte[], java.nio.charset.Charset)\n","      - String(byte[])\n","\n","  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.5.8\n","  String\n","\n","      public String(byte[] bytes, int offset, int length, String charsetName) throws UnsupportedEncodingException\n","\n","  Constructs a new String by decoding the specified subarray of bytes using the specified charset. The length of the new\n","  String is a function of the charset, and hence may not be equal to the length of the subarray.\n","\n","  The behavior of this constructor when the given bytes are not valid in the given charset is unspecified. The CharsetDecoder\n","  class should be used when more control over the decoding process is required.\n","\n","  Parameters:\n","\n","      bytes - The bytes to be decoded into characters\n","      offset - The index of the first byte to decode\n","      length - The number of bytes to decode\n","      charsetName - The name of a supported charset\n","\n","  Throws:\n","\n","      UnsupportedEncodingException - If the named charset is not supported\n","      IndexOutOfBoundsException - If offset is negative, length is negative, or offset is greater than\n","      bytes.length - length\n","\n","  Since:\n","\n","      1.1\n","\n","  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.5.9\n","  String\n","\n","      public String(byte[] bytes, int offset, int length, Charset charset)\n","\n","  Constructs a new String by decoding the specified subarray of bytes using the specified charset. The length of the new\n","  String is a function of the charset, and hence may not be equal to the length of the subarray.\n","\n","  This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement string.\n","  The CharsetDecoder class should be used when more control over the decoding process is required.\n","\n","  Parameters:\n","\n","      bytes - The bytes to be decoded into characters\n","      offset - The index of the first byte to decode\n","      length - The number of bytes to decode\n","      charset - The charset to be used to decode the bytes\n","\n","  Throws:\n","\n","      IndexOutOfBoundsException - If offset is negative, length is negative, or offset is greater than\n","      bytes.length - length\n","\n","  Since:\n","\n","      1.6\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.5.10\n","  String\n","\n","      public String(byte[] bytes, String charsetName) throws UnsupportedEncodingException\n","\n","  Constructs a new String by decoding the specified array of bytes using the specified charset. The length of the new\n","  String is a function of the charset, and hence may not be equal to the length of the byte array.\n","\n","  The behavior of this constructor when the given bytes are not valid in the given charset is unspecified. The CharsetDecoder\n","  class should be used when more control over the decoding process is required.\n","\n","  Parameters:\n","\n","      bytes - The bytes to be decoded into characters\n","      charsetName - The name of a supported charset\n","\n","  Throws:\n","\n","      UnsupportedEncodingException - If the named charset is not supported\n","\n","  Since:\n","\n","      1.1\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.5.11\n","  String\n","\n","      public String(byte[] bytes, Charset charset)\n","\n","  Constructs a new String by decoding the specified array of bytes using the specified charset. The length of the new\n","  String is a function of the charset, and hence may not be equal to the length of the byte array.\n","\n","  This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement string.\n","  The CharsetDecoder class should be used when more control over the decoding process is required.\n","\n","  Parameters:\n","\n","      bytes - The bytes to be decoded into characters\n","      charset - The charset to be used to decode the bytes\n","\n","  Since:\n","\n","      1.6\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.5.12\n","  String\n","\n","      public String(byte[] bytes, int offset, int length)\n","\n","  Constructs a new String by decoding the specified subarray of bytes using the default charset. The length of the new\n","  String is a function of the charset, and hence may not be equal to the length of the subarray.\n","\n","  The behavior of this constructor when the given bytes are not valid in the default charset is unspecified. The\n","  CharsetDecoder class should be used when more control over the decoding process is required.\n","\n","  Parameters:\n","\n","      bytes - The bytes to be decoded into characters\n","      offset - The index of the first byte to decode\n","      length - The number of bytes to decode\n","\n","  Throws:\n","\n","      IndexOutOfBoundsException - If offset is negative, length is negative, or offset is greater than\n","      bytes.length - length\n","\n","  Since:\n","\n","      1.1\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.5.13\n","  String\n","\n","      public String(byte[] bytes)\n","\n","  Constructs a new String by decoding the specified array of bytes using the default charset. The length of the new\n","  String is a function of the charset, and hence may not be equal to the length of the byte array.\n","\n","  The behavior of this constructor when the given bytes are not valid in the default charset is unspecified. The\n","  CharsetDecoder class should be used when more control over the decoding process is required.\n","\n","  Parameters:\n","\n","      bytes - The bytes to be decoded into characters\n","\n","  Since:\n","\n","      1.1\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.5.14\n","  String\n","\n","      public String(StringBuffer buffer)\n","\n","  Allocates a new string that contains the sequence of characters currently contained in the string buffer argument. The contents\n","  of the string buffer are copied; subsequent modification of the string buffer does not affect the newly created string.\n","\n","  Parameters:\n","\n","      buffer - A StringBuffer\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.5.15\n","  String\n","\n","      public String(StringBuilder builder)\n","\n","  Allocates a new string that contains the sequence of characters currently contained in the string builder argument. The\n","  contents of the string builder are copied; subsequent modification of the string builder does not affect the newly created\n","  string.\n","\n","  This constructor is provided to ease migration to  StringBuilder. Obtaining a string from a string builder via the\n","   toString method is likely to run faster and is generally preferred.\n","\n","  Parameters:\n","\n","      builder - A StringBuilder\n","\n","  Since:\n","\n","      1.5\n","\n","  ——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6\n","  Method Details\n","\n","  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.1\n","  length\n","\n","      public int length()\n","\n","  Returns the length of this string. The length is equal to the number of Unicode code units in the string.\n","\n","  Specified by:\n","\n","      length in interface CharSequence\n","\n","  Returns:\n","\n","      the length of the sequence of characters represented by this object.\n","\n","  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.2\n","  isEmpty\n","\n","      public boolean isEmpty()\n","\n","  Returns true if, and only if, length() is 0.\n","\n","  Specified by:\n","\n","      isEmpty in interface CharSequence\n","\n","  Returns:\n","\n","      true if length() is 0, otherwise false\n","\n","  Since:\n","\n","      1.6\n","\n","  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.3\n","  charAt\n","\n","      public char charAt(int index)\n","\n","  Returns the char value at the specified index. An index ranges from 0 to length() - 1. The first char value of the\n","  sequence is at index 0, the next at index 1, and so on, as for array indexing.\n","\n","  If the char value specified by the index is a surrogate, the surrogate value is returned.\n","\n","  Specified by:\n","\n","      charAt in interface CharSequence\n","\n","  Parameters:\n","\n","      index - the index of the char value.\n","\n","  Returns:\n","\n","      the char value at the specified index of this string. The first char value is at index 0.\n","\n","  Throws:\n","\n","      IndexOutOfBoundsException - if the index argument is negative or not less than the length of this string.\n","\n","  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.4\n","  codePointAt\n","\n","      public int codePointAt(int index)\n","\n","  Returns the character (Unicode code point) at the specified index. The index refers to char values (Unicode code units) and\n","  ranges from 0 to length() - 1.\n","\n","  If the char value specified at the given index is in the high-surrogate range, the following index is less than the length of\n","  this String, and the char value at the following index is in the low-surrogate range, then the supplementary code point\n","  corresponding to this surrogate pair is returned. Otherwise, the char value at the given index is returned.\n","\n","  Parameters:\n","\n","      index - the index to the char values\n","\n","  Returns:\n","\n","      the code point value of the character at the index\n","\n","  Throws:\n","\n","      IndexOutOfBoundsException - if the index argument is negative or not less than the length of this string.\n","\n","  Since:\n","\n","      1.5\n","\n","  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.5\n","  codePointBefore\n","\n","      public int codePointBefore(int index)\n","\n","  Returns the character (Unicode code point) before the specified index. The index refers to char values (Unicode code units)\n","  and ranges from 1 to length.\n","\n","  If the char value at (index - 1) is in the low-surrogate range, (index - 2) is not negative, and the char value at\n","  (index - 2) is in the high-surrogate range, then the supplementary code point value of the surrogate pair is returned. If the\n","  char value at index - 1 is an unpaired low-surrogate or a high-surrogate, the surrogate value is returned.\n","\n","  Parameters:\n","\n","      index - the index following the code point that should be returned\n","\n","  Returns:\n","\n","      the Unicode code point value before the given index.\n","\n","  Throws:\n","\n","      IndexOutOfBoundsException - if the index argument is less than 1 or greater than the length of this string.\n","\n","  Since:\n","\n","      1.5\n","\n","  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.6\n","  codePointCount\n","\n","      public int codePointCount(int beginIndex, int endIndex)\n","\n","  Returns the number of Unicode code points in the specified text range of this String. The text range begins at the specified\n","  beginIndex and extends to the char at index endIndex - 1. Thus the length (in chars) of the text range is\n","  endIndex-beginIndex. Unpaired surrogates within the text range count as one code point each.\n","\n","  Parameters:\n","\n","      beginIndex - the index to the first char of the text range.\n","      endIndex - the index after the last char of the text range.\n","\n","  Returns:\n","\n","      the number of Unicode code points in the specified text range\n","\n","  Throws:\n","\n","      IndexOutOfBoundsException - if the beginIndex is negative, or endIndex is larger than the length of this String,\n","      or beginIndex is larger than endIndex.\n","\n","  Since:\n","\n","      1.5\n","\n","  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.7\n","  offsetByCodePoints\n","\n","      public int offsetByCodePoints(int index, int codePointOffset)\n","\n","  Returns the index within this String that is offset from the given index by codePointOffset code points. Unpaired\n","  surrogates within the text range given by index and codePointOffset count as one code point each.\n","\n","  Parameters:\n","\n","      index - the index to be offset\n","      codePointOffset - the offset in code points\n","\n","  Returns:\n","\n","      the index within this String\n","\n","  Throws:\n","\n","      IndexOutOfBoundsException - if index is negative or larger than the length of this String, or if codePointOffset\n","      is positive and the substring starting with index has fewer than codePointOffset code points, or if codePointOffset\n","      is negative and the substring before index has fewer than the absolute value of codePointOffset code points.\n","\n","  Since:\n","\n","      1.5\n","\n","  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.8\n","  getChars\n","\n","      public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)\n","\n","  Copies characters from this string into the destination character array.\n","\n","  The first character to be copied is at index srcBegin; the last character to be copied is at index srcEnd-1 (thus the total\n","  number of characters to be copied is srcEnd-srcBegin). The characters are copied into the subarray of dst starting at index\n","  dstBegin and ending at index:\n","\n","           dstBegin + (srcEnd-srcBegin) - 1\n","\n","  Parameters:\n","\n","      srcBegin - index of the first character in the string to copy.\n","      srcEnd - index after the last character in the string to copy.\n","      dst - the destination array.\n","      dstBegin - the start offset in the destination array.\n","\n","  Throws:\n","\n","      IndexOutOfBoundsException - If any of the following is true:\n","\n","      - srcBegin is negative.\n","      - srcBegin is greater than srcEnd\n","      - srcEnd is greater than the length of this string\n","      - dstBegin is negative\n","      - dstBegin+(srcEnd-srcBegin) is larger than dst.length\n","\n","  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.9\n","  getBytes\n","\n","      @Deprecated(since=\"1.1\") public void getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)\n","\n","  Deprecated.\n","\n","  This method does not properly convert characters into bytes. As of JDK 1.1, the preferred way to do this is via the\n","  getBytes() method, which uses the default charset.\n","\n","  Copies characters from this string into the destination byte array. Each byte receives the 8 low-order bits of the\n","  corresponding character. The eight high-order bits of each character are not copied and do not participate in the transfer in\n","  any way.\n","\n","  The first character to be copied is at index srcBegin; the last character to be copied is at index srcEnd-1. The total\n","  number of characters to be copied is srcEnd-srcBegin. The characters, converted to bytes, are copied into the subarray of\n","   dst starting at index dstBegin and ending at index:\n","\n","           dstBegin + (srcEnd-srcBegin) - 1\n","\n","  Parameters:\n","\n","      srcBegin - Index of the first character in the string to copy\n","      srcEnd - Index after the last character in the string to copy\n","      dst - The destination array\n","      dstBegin - The start offset in the destination array\n","\n","  Throws:\n","\n","      IndexOutOfBoundsException - If any of the following is true:\n","\n","      - srcBegin is negative\n","      - srcBegin is greater than srcEnd\n","      - srcEnd is greater than the length of this String\n","      - dstBegin is negative\n","      - dstBegin+(srcEnd-srcBegin) is larger than  dst.length\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.10\n","  getBytes\n","\n","      public byte[] getBytes(String charsetName) throws UnsupportedEncodingException\n","\n","  Encodes this String into a sequence of bytes using the named charset, storing the result into a new byte array.\n","\n","  The behavior of this method when this string cannot be encoded in the given charset is unspecified. The CharsetEncoder\n","  class should be used when more control over the encoding process is required.\n","\n","  Parameters:\n","\n","      charsetName - The name of a supported charset\n","\n","  Returns:\n","\n","      The resultant byte array\n","\n","  Throws:\n","\n","      UnsupportedEncodingException - If the named charset is not supported\n","\n","  Since:\n","\n","      1.1\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.11\n","  getBytes\n","\n","      public byte[] getBytes(Charset charset)\n","\n","  Encodes this String into a sequence of bytes using the given charset, storing the result into a new byte array.\n","\n","  This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement byte\n","  array. The CharsetEncoder class should be used when more control over the encoding process is required.\n","\n","  Parameters:\n","\n","      charset - The Charset to be used to encode the String\n","\n","  Returns:\n","\n","      The resultant byte array\n","\n","  Since:\n","\n","      1.6\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.12\n","  getBytes\n","\n","      public byte[] getBytes()\n","\n","  Encodes this String into a sequence of bytes using the default charset, storing the result into a new byte array.\n","\n","  The behavior of this method when this string cannot be encoded in the default charset is unspecified. The CharsetEncoder\n","  class should be used when more control over the encoding process is required.\n","\n","  Returns:\n","\n","      The resultant byte array\n","\n","  Since:\n","\n","      1.1\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.13\n","  equals\n","\n","      public boolean equals(Object anObject)\n","\n","  Compares this string to the specified object. The result is  true if and only if the argument is not null and is a\n","   String object that represents the same sequence of characters as this object.\n","\n","  For finer-grained String comparison, refer to Collator.\n","\n","  Overrides:\n","\n","      equals in class Object\n","\n","  Parameters:\n","\n","      anObject - The object to compare this String against\n","\n","  Returns:\n","\n","      true if the given object represents a String equivalent to this string, false otherwise\n","\n","  See Also:\n","\n","      - compareTo(String)\n","      - equalsIgnoreCase(String)\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.14\n","  contentEquals\n","\n","      public boolean contentEquals(StringBuffer sb)\n","\n","  Compares this string to the specified StringBuffer. The result is true if and only if this String represents the same\n","  sequence of characters as the specified StringBuffer. This method synchronizes on the StringBuffer.\n","\n","  For finer-grained String comparison, refer to Collator.\n","\n","  Parameters:\n","\n","      sb - The StringBuffer to compare this String against\n","\n","  Returns:\n","\n","      true if this String represents the same sequence of characters as the specified StringBuffer, false otherwise\n","\n","  Since:\n","\n","      1.4\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.15\n","  contentEquals\n","\n","      public boolean contentEquals(CharSequence cs)\n","\n","  Compares this string to the specified CharSequence. The result is true if and only if this String represents the same\n","  sequence of char values as the specified sequence. Note that if the CharSequence is a StringBuffer then the method\n","  synchronizes on it.\n","\n","  For finer-grained String comparison, refer to Collator.\n","\n","  Parameters:\n","\n","      cs - The sequence to compare this String against\n","\n","  Returns:\n","\n","      true if this String represents the same sequence of char values as the specified sequence,  false otherwise\n","\n","  Since:\n","\n","      1.5\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.16\n","  equalsIgnoreCase\n","\n","      public boolean equalsIgnoreCase(String anotherString)\n","\n","  Compares this String to another String, ignoring case considerations. Two strings are considered equal ignoring case if\n","  they are of the same length and corresponding Unicode code points in the two strings are equal ignoring case.\n","\n","  Two Unicode code points are considered the same ignoring case if at least one of the following is true:\n","\n","  - The two Unicode code points are the same (as compared by the == operator)\n","  - Calling Character.toLowerCase(Character.toUpperCase(int)) on each Unicode code point produces the same result\n","\n","  Note that this method does not take locale into account, and will result in unsatisfactory results for certain locales. The\n","  Collator class provides locale-sensitive comparison.\n","\n","  Parameters:\n","\n","      anotherString - The String to compare this String against\n","\n","  Returns:\n","\n","      true if the argument is not null and it represents an equivalent String ignoring case;  false otherwise\n","\n","  See Also:\n","\n","      - equals(Object)\n","      - codePoints()\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.17\n","  compareTo\n","\n","      public int compareTo(String anotherString)\n","\n","  Compares two strings lexicographically. The comparison is based on the Unicode value of each character in the strings. The\n","  character sequence represented by this String object is compared lexicographically to the character sequence represented by\n","  the argument string. The result is a negative integer if this String object lexicographically precedes the argument string.\n","  The result is a positive integer if this String object lexicographically follows the argument string. The result is zero if\n","  the strings are equal; compareTo returns 0 exactly when the equals(Object) method would return true.\n","\n","  This is the definition of lexicographic ordering. If two strings are different, then either they have different characters at\n","  some index that is a valid index for both strings, or their lengths are different, or both. If they have different characters\n","  at one or more index positions, let k be the smallest such index; then the string whose character at position k has the\n","  smaller value, as determined by using the < operator, lexicographically precedes the other string. In this case, compareTo\n","  returns the difference of the two character values at position k in the two string -- that is, the value:\n","\n","       this.charAt(k)-anotherString.charAt(k)\n","\n","  If there is no index position at which they differ, then the shorter string lexicographically precedes the longer string. In\n","  this case, compareTo returns the difference of the lengths of the strings -- that is, the value:\n","\n","       this.length()-anotherString.length()\n","\n","  For finer-grained String comparison, refer to Collator.\n","\n","  Specified by:\n","\n","      compareTo in interface Comparable<String>\n","\n","  Parameters:\n","\n","      anotherString - the String to be compared.\n","\n","  Returns:\n","\n","      the value 0 if the argument string is equal to this string; a value less than 0 if this string is lexicographically\n","      less than the string argument; and a value greater than 0 if this string is lexicographically greater than the string\n","      argument.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.18\n","  compareToIgnoreCase\n","\n","      public int compareToIgnoreCase(String str)\n","\n","  Compares two strings lexicographically, ignoring case differences. This method returns an integer whose sign is that of calling\n","  compareTo with case folded versions of the strings where case differences have been eliminated by calling\n","  Character.toLowerCase(Character.toUpperCase(int)) on each Unicode code point.\n","\n","  Note that this method does not take locale into account, and will result in an unsatisfactory ordering for certain locales.\n","  The Collator class provides locale-sensitive comparison.\n","\n","  Parameters:\n","\n","      str - the String to be compared.\n","\n","  Returns:\n","\n","      a negative integer, zero, or a positive integer as the specified String is greater than, equal to, or less than this\n","      String, ignoring case considerations.\n","\n","  Since:\n","\n","      1.2\n","\n","  See Also:\n","\n","      - Collator\n","      - codePoints()\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.19\n","  regionMatches\n","\n","      public boolean regionMatches(int toffset, String other, int ooffset, int len)\n","\n","  Tests if two string regions are equal.\n","\n","  A substring of this String object is compared to a substring of the argument other. The result is true if these substrings\n","  represent identical character sequences. The substring of this String object to be compared begins at index toffset and has\n","  length len. The substring of other to be compared begins at index ooffset and has length len. The result is false if\n","  and only if at least one of the following is true:\n","\n","  - toffset is negative.\n","  - ooffset is negative.\n","  - toffset+len is greater than the length of this String object.\n","  - ooffset+len is greater than the length of the other argument.\n","  - There is some nonnegative integer k less than len such that: this.charAt(toffset + k) != other.charAt(ooffset + \n","    k)\n","\n","  Note that this method does not take locale into account. The Collator class provides locale-sensitive comparison.\n","\n","  Parameters:\n","\n","      toffset - the starting offset of the subregion in this string.\n","      other - the string argument.\n","      ooffset - the starting offset of the subregion in the string argument.\n","      len - the number of characters to compare.\n","\n","  Returns:\n","\n","      true if the specified subregion of this string exactly matches the specified subregion of the string argument; false\n","      otherwise.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.20\n","  regionMatches\n","\n","      public boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)\n","\n","  Tests if two string regions are equal.\n","\n","  A substring of this String object is compared to a substring of the argument other. The result is true if these\n","  substrings represent Unicode code point sequences that are the same, ignoring case if and only if ignoreCase is true. The\n","  sequences tsequence and osequence are compared, where tsequence is the sequence produced as if by calling\n","  this.substring(toffset, toffset + len).codePoints() and osequence is the sequence produced as if by calling\n","  other.substring(ooffset, ooffset + len).codePoints(). The result is true if and only if all of the following are true:\n","\n","  - toffset is non-negative.\n","  - ooffset is non-negative.\n","  - toffset+len is less than or equal to the length of this String object.\n","  - ooffset+len is less than or equal to the length of the other argument.\n","  - if ignoreCase is false, all pairs of corresponding Unicode code points are equal integer values; or if ignoreCase is\n","    true, Character.toLowerCase( Character.toUpperCase(int)) on all pairs of Unicode code points results in equal\n","    integer values.\n","\n","  Note that this method does not take locale into account, and will result in unsatisfactory results for certain locales when\n","  ignoreCase is true. The Collator class provides locale-sensitive comparison.\n","\n","  Parameters:\n","\n","      ignoreCase - if true, ignore case when comparing characters.\n","      toffset - the starting offset of the subregion in this string.\n","      other - the string argument.\n","      ooffset - the starting offset of the subregion in the string argument.\n","      len - the number of characters (Unicode code units - 16bit char value) to compare.\n","\n","  Returns:\n","\n","      true if the specified subregion of this string matches the specified subregion of the string argument; false otherwise.\n","      Whether the matching is exact or case insensitive depends on the ignoreCase argument.\n","\n","  See Also:\n","\n","      - codePoints()\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.21\n","  startsWith\n","\n","      public boolean startsWith(String prefix, int toffset)\n","\n","  Tests if the substring of this string beginning at the specified index starts with the specified prefix.\n","\n","  Parameters:\n","\n","      prefix - the prefix.\n","      toffset - where to begin looking in this string.\n","\n","  Returns:\n","\n","      true if the character sequence represented by the argument is a prefix of the substring of this object starting at index\n","      toffset; false otherwise. The result is false if toffset is negative or greater than the length of this String\n","      object; otherwise the result is the same as the result of the expression\n","\n","                    this.substring(toffset).startsWith(prefix)\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.22\n","  startsWith\n","\n","      public boolean startsWith(String prefix)\n","\n","  Tests if this string starts with the specified prefix.\n","\n","  Parameters:\n","\n","      prefix - the prefix.\n","\n","  Returns:\n","\n","      true if the character sequence represented by the argument is a prefix of the character sequence represented by this\n","      string; false otherwise. Note also that true will be returned if the argument is an empty string or is equal to this\n","      String object as determined by the equals(Object) method.\n","\n","  Since:\n","\n","      1.0\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.23\n","  endsWith\n","\n","      public boolean endsWith(String suffix)\n","\n","  Tests if this string ends with the specified suffix.\n","\n","  Parameters:\n","\n","      suffix - the suffix.\n","\n","  Returns:\n","\n","      true if the character sequence represented by the argument is a suffix of the character sequence represented by this\n","      object; false otherwise. Note that the result will be true if the argument is the empty string or is equal to this\n","      String object as determined by the equals(Object) method.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.24\n","  hashCode\n","\n","      public int hashCode()\n","\n","  Returns a hash code for this string. The hash code for a String object is computed as\n","\n","       s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n","\n","  using int arithmetic, where s[i] is the ith character of the string, n is the length of the string, and ^ indicates\n","  exponentiation. (The hash value of the empty string is zero.)\n","\n","  Overrides:\n","\n","      hashCode in class Object\n","\n","  Returns:\n","\n","      a hash code value for this object.\n","\n","  See Also:\n","\n","      - Object.equals(java.lang.Object)\n","      - System.identityHashCode(java.lang.Object)\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.25\n","  indexOf\n","\n","      public int indexOf(int ch)\n","\n","  Returns the index within this string of the first occurrence of the specified character. If a character with value ch occurs\n","  in the character sequence represented by this String object, then the index (in Unicode code units) of the first such\n","  occurrence is returned. For values of ch in the range from 0 to 0xFFFF (inclusive), this is the smallest value k such that:\n","\n","       this.charAt(k) == ch\n","\n","  is true. For other values of ch, it is the smallest value k such that:\n","\n","       this.codePointAt(k) == ch\n","\n","  is true. In either case, if no such character occurs in this string, then -1 is returned.\n","\n","  Parameters:\n","\n","      ch - a character (Unicode code point).\n","\n","  Returns:\n","\n","      the index of the first occurrence of the character in the character sequence represented by this object, or -1 if the\n","      character does not occur.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.26\n","  indexOf\n","\n","      public int indexOf(int ch, int fromIndex)\n","\n","  Returns the index within this string of the first occurrence of the specified character, starting the search at the specified\n","  index.\n","\n","  If a character with value ch occurs in the character sequence represented by this String object at an index no smaller than\n","  fromIndex, then the index of the first such occurrence is returned. For values of ch in the range from 0 to 0xFFFF\n","  (inclusive), this is the smallest value k such that:\n","\n","       (this.charAt(k) == ch) && (k >= fromIndex)\n","\n","  is true. For other values of ch, it is the smallest value k such that:\n","\n","       (this.codePointAt(k) == ch) && (k >= fromIndex)\n","\n","  is true. In either case, if no such character occurs in this string at or after position fromIndex, then -1 is returned.\n","\n","  There is no restriction on the value of fromIndex. If it is negative, it has the same effect as if it were zero: this entire\n","  string may be searched. If it is greater than the length of this string, it has the same effect as if it were equal to the\n","  length of this string: -1 is returned.\n","\n","  All indices are specified in char values (Unicode code units).\n","\n","  API Note:\n","\n","      Unlike substring(int), for example, this method does not throw an exception when fromIndex is outside the valid\n","      range. Rather, it returns -1 when fromIndex is larger than the length of the string. This result is, by itself,\n","      indistinguishable from a genuine absence of ch in the string. If stricter behavior is needed, indexOf(int, int, int)\n","      should be considered instead. On a String s, for example, s.indexOf(ch, fromIndex, s.length()) would throw if\n","      fromIndex were larger than the string length, or were negative.\n","\n","  Parameters:\n","\n","      ch - a character (Unicode code point).\n","      fromIndex - the index to start the search from.\n","\n","  Returns:\n","\n","      the index of the first occurrence of the character in the character sequence represented by this object that is greater\n","      than or equal to fromIndex, or -1 if the character does not occur.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.27\n","  indexOf\n","\n","      public int indexOf(int ch, int beginIndex, int endIndex)\n","\n","  Returns the index within this string of the first occurrence of the specified character, starting the search at beginIndex\n","  and stopping before endIndex.\n","\n","  If a character with value ch occurs in the character sequence represented by this String object at an index no smaller than\n","  beginIndex but smaller than endIndex, then the index of the first such occurrence is returned. For values of ch in the\n","  range from 0 to 0xFFFF (inclusive), this is the smallest value k such that:\n","\n","       (this.charAt(k) == ch) && (beginIndex <= k < endIndex)\n","\n","  is true. For other values of ch, it is the smallest value k such that:\n","\n","       (this.codePointAt(k) == ch) && (beginIndex <= k < endIndex)\n","\n","  is true. In either case, if no such character occurs in this string at or after position beginIndex and before position\n","  endIndex, then -1 is returned.\n","\n","  All indices are specified in char values (Unicode code units).\n","\n","  Parameters:\n","\n","      ch - a character (Unicode code point).\n","      beginIndex - the index to start the search from (included).\n","      endIndex - the index to stop the search at (excluded).\n","\n","  Returns:\n","\n","      the index of the first occurrence of the character in the character sequence represented by this object that is greater\n","      than or equal to beginIndex and less than endIndex, or -1 if the character does not occur.\n","\n","  Throws:\n","\n","      StringIndexOutOfBoundsException - if beginIndex is negative, or endIndex is larger than the length of this String\n","      object, or beginIndex is larger than endIndex.\n","\n","  Since:\n","\n","      21\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.28\n","  lastIndexOf\n","\n","      public int lastIndexOf(int ch)\n","\n","  Returns the index within this string of the last occurrence of the specified character. For values of ch in the range from 0\n","  to 0xFFFF (inclusive), the index (in Unicode code units) returned is the largest value k such that:\n","\n","       this.charAt(k) == ch\n","\n","  is true. For other values of ch, it is the largest value k such that:\n","\n","       this.codePointAt(k) == ch\n","\n","  is true. In either case, if no such character occurs in this string, then -1 is returned. The String is searched backwards\n","  starting at the last character.\n","\n","  Parameters:\n","\n","      ch - a character (Unicode code point).\n","\n","  Returns:\n","\n","      the index of the last occurrence of the character in the character sequence represented by this object, or -1 if the\n","      character does not occur.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.29\n","  lastIndexOf\n","\n","      public int lastIndexOf(int ch, int fromIndex)\n","\n","  Returns the index within this string of the last occurrence of the specified character, searching backward starting at the\n","  specified index. For values of ch in the range from 0 to 0xFFFF (inclusive), the index returned is the largest value k such\n","  that:\n","\n","       (this.charAt(k) == ch) && (k <= fromIndex)\n","\n","  is true. For other values of ch, it is the largest value k such that:\n","\n","       (this.codePointAt(k) == ch) && (k <= fromIndex)\n","\n","  is true. In either case, if no such character occurs in this string at or before position fromIndex, then -1 is returned.\n","\n","  All indices are specified in char values (Unicode code units).\n","\n","  Parameters:\n","\n","      ch - a character (Unicode code point).\n","      fromIndex - the index to start the search from. There is no restriction on the value of fromIndex. If it is greater\n","      than or equal to the length of this string, it has the same effect as if it were equal to one less than the length of this\n","      string: this entire string may be searched. If it is negative, it has the same effect as if it were -1: -1 is returned.\n","\n","  Returns:\n","\n","      the index of the last occurrence of the character in the character sequence represented by this object that is less than or\n","      equal to fromIndex, or -1 if the character does not occur before that point.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.30\n","  indexOf\n","\n","      public int indexOf(String str)\n","\n","  Returns the index within this string of the first occurrence of the specified substring.\n","\n","  The returned index is the smallest value k for which:\n","\n","       this.startsWith(str, k)\n","\n","  If no such value of k exists, then -1 is returned.\n","\n","  Parameters:\n","\n","      str - the substring to search for.\n","\n","  Returns:\n","\n","      the index of the first occurrence of the specified substring, or -1 if there is no such occurrence.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.31\n","  indexOf\n","\n","      public int indexOf(String str, int fromIndex)\n","\n","  Returns the index within this string of the first occurrence of the specified substring, starting at the specified index.\n","\n","  The returned index is the smallest value k for which:\n","\n","           k >= Math.min(fromIndex, this.length()) &&\n","                         this.startsWith(str, k)\n","\n","  If no such value of k exists, then -1 is returned.\n","\n","  API Note:\n","\n","      Unlike substring(int), for example, this method does not throw an exception when fromIndex is outside the valid\n","      range. Rather, it returns -1 when fromIndex is larger than the length of the string. This result is, by itself,\n","      indistinguishable from a genuine absence of str in the string. If stricter behavior is needed,\n","      indexOf(String, int, int) should be considered instead. On String s and a non-empty str, for example,\n","      s.indexOf(str, fromIndex, s.length()) would throw if fromIndex were larger than the string length, or were negative.\n","\n","  Parameters:\n","\n","      str - the substring to search for.\n","      fromIndex - the index from which to start the search.\n","\n","  Returns:\n","\n","      the index of the first occurrence of the specified substring, starting at the specified index, or -1 if there is no such\n","      occurrence.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.32\n","  indexOf\n","\n","      public int indexOf(String str, int beginIndex, int endIndex)\n","\n","  Returns the index of the first occurrence of the specified substring within the specified index range of this string.\n","\n","  This method returns the same result as the one of the invocation\n","\n","           s.substring(beginIndex, endIndex).indexOf(str) + beginIndex\n","\n","  if the index returned by indexOf(String) is non-negative, and returns -1 otherwise. (No substring is instantiated, though.)\n","\n","  Parameters:\n","\n","      str - the substring to search for.\n","      beginIndex - the index to start the search from (included).\n","      endIndex - the index to stop the search at (excluded).\n","\n","  Returns:\n","\n","      the index of the first occurrence of the specified substring within the specified index range, or -1 if there is no such\n","      occurrence.\n","\n","  Throws:\n","\n","      StringIndexOutOfBoundsException - if beginIndex is negative, or endIndex is larger than the length of this String\n","      object, or beginIndex is larger than endIndex.\n","\n","  Since:\n","\n","      21\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.33\n","  lastIndexOf\n","\n","      public int lastIndexOf(String str)\n","\n","  Returns the index within this string of the last occurrence of the specified substring. The last occurrence of the empty string\n","  \"\" is considered to occur at the index value this.length().\n","\n","  The returned index is the largest value k for which:\n","\n","       this.startsWith(str, k)\n","\n","  If no such value of k exists, then -1 is returned.\n","\n","  Parameters:\n","\n","      str - the substring to search for.\n","\n","  Returns:\n","\n","      the index of the last occurrence of the specified substring, or -1 if there is no such occurrence.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.34\n","  lastIndexOf\n","\n","      public int lastIndexOf(String str, int fromIndex)\n","\n","  Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the\n","  specified index.\n","\n","  The returned index is the largest value k for which:\n","\n","           k <= Math.min(fromIndex, this.length()) &&\n","                         this.startsWith(str, k)\n","\n","  If no such value of k exists, then -1 is returned.\n","\n","  Parameters:\n","\n","      str - the substring to search for.\n","      fromIndex - the index to start the search from.\n","\n","  Returns:\n","\n","      the index of the last occurrence of the specified substring, searching backward from the specified index, or -1 if there\n","      is no such occurrence.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.35\n","  substring\n","\n","      public String substring(int beginIndex)\n","\n","  Returns a string that is a substring of this string. The substring begins with the character at the specified index and extends\n","  to the end of this string.\n","\n","  Examples:\n","\n","       \"unhappy\".substring(2) returns \"happy\"\n","       \"Harbison\".substring(3) returns \"bison\"\n","       \"emptiness\".substring(9) returns \"\" (an empty string)\n","\n","  Parameters:\n","\n","      beginIndex - the beginning index, inclusive.\n","\n","  Returns:\n","\n","      the specified substring.\n","\n","  Throws:\n","\n","      IndexOutOfBoundsException - if beginIndex is negative or larger than the length of this String object.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.36\n","  substring\n","\n","      public String substring(int beginIndex, int endIndex)\n","\n","  Returns a string that is a substring of this string. The substring begins at the specified beginIndex and extends to the\n","  character at index endIndex - 1. Thus the length of the substring is endIndex-beginIndex.\n","\n","  Examples:\n","\n","       \"hamburger\".substring(4, 8) returns \"urge\"\n","       \"smiles\".substring(1, 5) returns \"mile\"\n","\n","  Parameters:\n","\n","      beginIndex - the beginning index, inclusive.\n","      endIndex - the ending index, exclusive.\n","\n","  Returns:\n","\n","      the specified substring.\n","\n","  Throws:\n","\n","      IndexOutOfBoundsException - if the beginIndex is negative, or endIndex is larger than the length of this String\n","      object, or beginIndex is larger than endIndex.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.37\n","  subSequence\n","\n","      public CharSequence subSequence(int beginIndex, int endIndex)\n","\n","  Returns a character sequence that is a subsequence of this sequence.\n","\n","  An invocation of this method of the form\n","\n","       str.subSequence(begin, end)\n","\n","  behaves in exactly the same way as the invocation\n","\n","       str.substring(begin, end)\n","\n","  Specified by:\n","\n","      subSequence in interface CharSequence\n","\n","  API Note:\n","\n","      This method is defined so that the String class can implement the CharSequence interface.\n","\n","  Parameters:\n","\n","      beginIndex - the begin index, inclusive.\n","      endIndex - the end index, exclusive.\n","\n","  Returns:\n","\n","      the specified subsequence.\n","\n","  Throws:\n","\n","      IndexOutOfBoundsException - if beginIndex or endIndex is negative, if endIndex is greater than length(), or if\n","      beginIndex is greater than endIndex\n","\n","  Since:\n","\n","      1.4\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.38\n","  concat\n","\n","      public String concat(String str)\n","\n","  Concatenates the specified string to the end of this string.\n","\n","  If the length of the argument string is 0, then this String object is returned. Otherwise, a String object is returned\n","  that represents a character sequence that is the concatenation of the character sequence represented by this String object\n","  and the character sequence represented by the argument string.\n","\n","  Examples:\n","\n","       \"cares\".concat(\"s\") returns \"caress\"\n","       \"to\".concat(\"get\").concat(\"her\") returns \"together\"\n","\n","  Parameters:\n","\n","      str - the String that is concatenated to the end of this String.\n","\n","  Returns:\n","\n","      a string that represents the concatenation of this object's characters followed by the string argument's characters.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.39\n","  replace\n","\n","      public String replace(char oldChar, char newChar)\n","\n","  Returns a string resulting from replacing all occurrences of oldChar in this string with newChar.\n","\n","  If the character oldChar does not occur in the character sequence represented by this String object, then a reference to\n","  this String object is returned. Otherwise, a String object is returned that represents a character sequence identical to\n","  the character sequence represented by this String object, except that every occurrence of oldChar is replaced by an\n","  occurrence of newChar.\n","\n","  Examples:\n","\n","       \"mesquite in your cellar\".replace('e', 'o')\n","               returns \"mosquito in your collar\"\n","       \"the war of baronets\".replace('r', 'y')\n","               returns \"the way of bayonets\"\n","       \"sparring with a purple porpoise\".replace('p', 't')\n","               returns \"starring with a turtle tortoise\"\n","       \"JonL\".replace('q', 'x') returns \"JonL\" (no change)\n","\n","  Parameters:\n","\n","      oldChar - the old character.\n","      newChar - the new character.\n","\n","  Returns:\n","\n","      a string derived from this string by replacing every occurrence of oldChar with newChar.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.40\n","  matches\n","\n","      public boolean matches(String regex)\n","\n","  Tells whether or not this string matches the given regular expression.\n","\n","  An invocation of this method of the form str.matches(regex) yields exactly the same result as the expression\n","\n","  Pattern.matches(regex, str)\n","\n","  Parameters:\n","\n","      regex - the regular expression to which this string is to be matched\n","\n","  Returns:\n","\n","      true if, and only if, this string matches the given regular expression\n","\n","  Throws:\n","\n","      PatternSyntaxException - if the regular expression's syntax is invalid\n","\n","  Since:\n","\n","      1.4\n","\n","  See Also:\n","\n","      - Pattern\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.41\n","  contains\n","\n","      public boolean contains(CharSequence s)\n","\n","  Returns true if and only if this string contains the specified sequence of char values.\n","\n","  Parameters:\n","\n","      s - the sequence to search for\n","\n","  Returns:\n","\n","      true if this string contains s, false otherwise\n","\n","  Since:\n","\n","      1.5\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.42\n","  replaceFirst\n","\n","      public String replaceFirst(String regex, String replacement)\n","\n","  Replaces the first substring of this string that matches the given regular expression with the given replacement.\n","\n","  An invocation of this method of the form str.replaceFirst(regex, repl) yields exactly the same result as the\n","  expression\n","\n","   Pattern.compile(regex).matcher(str).replaceFirst(repl) \n","\n","  Note that backslashes (\\) and dollar signs ($) in the replacement string may cause the results to be different than if it\n","  were being treated as a literal replacement string; see Matcher.replaceFirst(java.lang.String). Use\n","  Matcher.quoteReplacement(java.lang.String) to suppress the special meaning of these characters, if desired.\n","\n","  Parameters:\n","\n","      regex - the regular expression to which this string is to be matched\n","      replacement - the string to be substituted for the first match\n","\n","  Returns:\n","\n","      The resulting String\n","\n","  Throws:\n","\n","      PatternSyntaxException - if the regular expression's syntax is invalid\n","\n","  Since:\n","\n","      1.4\n","\n","  See Also:\n","\n","      - Pattern\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.43\n","  replaceAll\n","\n","      public String replaceAll(String regex, String replacement)\n","\n","  Replaces each substring of this string that matches the given regular expression with the given replacement.\n","\n","  An invocation of this method of the form str.replaceAll(regex, repl) yields exactly the same result as the\n","  expression\n","\n","   Pattern.compile(regex).matcher(str).replaceAll(repl) \n","\n","  Note that backslashes (\\) and dollar signs ($) in the replacement string may cause the results to be different than if it\n","  were being treated as a literal replacement string; see Matcher.replaceAll. Use\n","  Matcher.quoteReplacement(java.lang.String) to suppress the special meaning of these characters, if desired.\n","\n","  Parameters:\n","\n","      regex - the regular expression to which this string is to be matched\n","      replacement - the string to be substituted for each match\n","\n","  Returns:\n","\n","      The resulting String\n","\n","  Throws:\n","\n","      PatternSyntaxException - if the regular expression's syntax is invalid\n","\n","  Since:\n","\n","      1.4\n","\n","  See Also:\n","\n","      - Pattern\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.44\n","  replace\n","\n","      public String replace(CharSequence target, CharSequence replacement)\n","\n","  Replaces each substring of this string that matches the literal target sequence with the specified literal replacement\n","  sequence. The replacement proceeds from the beginning of the string to the end, for example, replacing \"aa\" with \"b\" in the\n","  string \"aaa\" will result in \"ba\" rather than \"ab\".\n","\n","  Parameters:\n","\n","      target - The sequence of char values to be replaced\n","      replacement - The replacement sequence of char values\n","\n","  Returns:\n","\n","      The resulting string\n","\n","  Since:\n","\n","      1.5\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.45\n","  split\n","\n","      public String[] split(String regex, int limit)\n","\n","  Splits this string around matches of the given regular expression.\n","\n","  The array returned by this method contains each substring of this string that is terminated by another substring that matches\n","  the given expression or is terminated by the end of the string. The substrings in the array are in the order in which they\n","  occur in this string. If the expression does not match any part of the input then the resulting array has just one element,\n","  namely this string.\n","\n","  When there is a positive-width match at the beginning of this string then an empty leading substring is included at the\n","  beginning of the resulting array. A zero-width match at the beginning however never produces such empty leading substring.\n","\n","  The limit parameter controls the number of times the pattern is applied and therefore affects the length of the resulting\n","  array.\n","\n","  - If the limit is positive then the pattern will be applied at most limit - 1 times, the array's length will be no greater\n","    than limit, and the array's last entry will contain all input beyond the last matched delimiter.\n","\n","  - If the limit is zero then the pattern will be applied as many times as possible, the array can have any length, and\n","    trailing empty strings will be discarded.\n","\n","  - If the limit is negative then the pattern will be applied as many times as possible and the array can have any length.\n","\n","  The string \"boo:and:foo\", for example, yields the following results with these parameters:\n","\n","  ====== ====== ==============================\n","  Regex  Limit  Result\n","  ====== ====== ==============================\n","  :      2      { \"boo\", \"and:foo\" }\n","  \\      5      { \"boo\", \"and\", \"foo\" }\n","  \\      -2     { \"boo\", \"and\", \"foo\" }\n","  o      5      { \"b\", \"\", \":and:f\", \"\", \"\" }\n","  \\      -2     { \"b\", \"\", \":and:f\", \"\", \"\" }\n","  \\      0      { \"b\", \"\", \":and:f\" }\n","  ====== ====== ==============================\n","\n","  An invocation of this method of the form str.split(regex, n) yields the same result as the expression\n","\n","   Pattern.compile(regex).split(str, n) \n","\n","  Parameters:\n","\n","      regex - the delimiting regular expression\n","      limit - the result threshold, as described above\n","\n","  Returns:\n","\n","      the array of strings computed by splitting this string around matches of the given regular expression\n","\n","  Throws:\n","\n","      PatternSyntaxException - if the regular expression's syntax is invalid\n","\n","  Since:\n","\n","      1.4\n","\n","  See Also:\n","\n","      - Pattern\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.46\n","  splitWithDelimiters\n","\n","      public String[] splitWithDelimiters(String regex, int limit)\n","\n","  Splits this string around matches of the given regular expression and returns both the strings and the matching delimiters.\n","\n","  The array returned by this method contains each substring of this string that is terminated by another substring that matches\n","  the given expression or is terminated by the end of the string. Each substring is immediately followed by the subsequence (the\n","  delimiter) that matches the given expression, except for the last substring, which is not followed by anything. The\n","  substrings in the array and the delimiters are in the order in which they occur in the input. If the expression does not match\n","  any part of the input then the resulting array has just one element, namely this string.\n","\n","  When there is a positive-width match at the beginning of this string then an empty leading substring is included at the\n","  beginning of the resulting array. A zero-width match at the beginning however never produces such empty leading substring nor\n","  the empty delimiter.\n","\n","  The limit parameter controls the number of times the pattern is applied and therefore affects the length of the resulting\n","  array.\n","\n","  - If the limit is positive then the pattern will be applied at most limit - 1 times, the array's length will be no greater\n","    than 2 × limit - 1, and the array's last entry will contain all input beyond the last matched delimiter.\n","  - If the limit is zero then the pattern will be applied as many times as possible, the array can have any length, and\n","    trailing empty strings will be discarded.\n","  - If the limit is negative then the pattern will be applied as many times as possible and the array can have any length.\n","\n","  The input \"boo:::and::foo\", for example, yields the following results with these parameters:\n","\n","  ====== ====== =====================================================\n","  Regex  Limit  Result\n","  ====== ====== =====================================================\n","  :+     2      { \"boo\", \":::\", \"and::foo\" }\n","  \\      5      { \"boo\", \":::\", \"and\", \"::\", \"foo\" }\n","  \\      -1     { \"boo\", \":::\", \"and\", \"::\", \"foo\" }\n","  o      5      { \"b\", \"o\", \"\", \"o\", \":::and::f\", \"o\", \"\", \"o\", \"\" }\n","  \\      -1     { \"b\", \"o\", \"\", \"o\", \":::and::f\", \"o\", \"\", \"o\", \"\" }\n","  \\      0      { \"b\", \"o\", \"\", \"o\", \":::and::f\", \"o\", \"\", \"o\" }\n","  ====== ====== =====================================================\n","\n","  API Note:\n","\n","      An invocation of this method of the form str.splitWithDelimiters(regex, n) yields the same result as the\n","      expression\n","\n","       Pattern.compile(regex).splitWithDelimiters(str, n) \n","\n","  Parameters:\n","\n","      regex - the delimiting regular expression\n","      limit - the result threshold, as described above\n","\n","  Returns:\n","\n","      the array of strings computed by splitting this string around matches of the given regular expression, alternating\n","      substrings and matching delimiters\n","\n","  Since:\n","\n","      21\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.47\n","  split\n","\n","      public String[] split(String regex)\n","\n","  Splits this string around matches of the given regular expression.\n","\n","  This method works as if by invoking the two-argument split method with the given expression and a limit argument of zero.\n","  Trailing empty strings are therefore not included in the resulting array.\n","\n","  The string \"boo:and:foo\", for example, yields the following results with these expressions:\n","\n","  ====== ========================\n","  Regex  Result\n","  ====== ========================\n","  :      { \"boo\", \"and\", \"foo\" }\n","  o      { \"b\", \"\", \":and:f\" }\n","  ====== ========================\n","\n","  Parameters:\n","\n","      regex - the delimiting regular expression\n","\n","  Returns:\n","\n","      the array of strings computed by splitting this string around matches of the given regular expression\n","\n","  Throws:\n","\n","      PatternSyntaxException - if the regular expression's syntax is invalid\n","\n","  Since:\n","\n","      1.4\n","\n","  See Also:\n","\n","      - Pattern\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.48\n","  join\n","\n","      public static String join(CharSequence delimiter, CharSequence... elements)\n","\n","  Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified\n","  delimiter.\n","\n","  For example,\n","\n","           String message = String.join(\"-\", \"Java\", \"is\", \"cool\");\n","           // message returned is: \"Java-is-cool\"\n","\n","  Note that if an element is null, then \"null\" is added.\n","\n","  Parameters:\n","\n","      delimiter - the delimiter that separates each element\n","      elements - the elements to join together.\n","\n","  Returns:\n","\n","      a new String that is composed of the elements separated by the delimiter\n","\n","  Throws:\n","\n","      NullPointerException - If delimiter or elements is null\n","\n","  Since:\n","\n","      1.8\n","\n","  See Also:\n","\n","      - StringJoiner\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.49\n","  join\n","\n","      public static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements)\n","\n","  Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified\n","  delimiter.\n","\n","  For example,\n","\n","           List<String> strings = List.of(\"Java\", \"is\", \"cool\");\n","           String message = String.join(\" \", strings);\n","           // message returned is: \"Java is cool\"\n","\n","           Set<String> strings =\n","               new LinkedHashSet<>(List.of(\"Java\", \"is\", \"very\", \"cool\"));\n","           String message = String.join(\"-\", strings);\n","           // message returned is: \"Java-is-very-cool\"\n","\n","  Note that if an individual element is null, then \"null\" is added.\n","\n","  Parameters:\n","\n","      delimiter - a sequence of characters that is used to separate each of the elements in the resulting String\n","      elements - an Iterable that will have its elements joined together.\n","\n","  Returns:\n","\n","      a new String that is composed from the elements argument\n","\n","  Throws:\n","\n","      NullPointerException - If delimiter or elements is null\n","\n","  Since:\n","\n","      1.8\n","\n","  See Also:\n","\n","      - join(CharSequence,CharSequence...)\n","      - StringJoiner\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.50\n","  toLowerCase\n","\n","      public String toLowerCase(Locale locale)\n","\n","  Converts all of the characters in this String to lower case using the rules of the given Locale. Case mapping is based on\n","  the Unicode Standard version specified by the Character class. Since case mappings are not always 1:1 char mappings, the\n","  resulting String and this String may differ in length.\n","\n","  Examples of lowercase mappings are in the following table:\n","\n","  ======================== ============= ============= ==================================================\n","  Language Code of Locale  Upper Case    Lower Case    Description\n","  ======================== ============= ============= ==================================================\n","  tr (Turkish)             \\\\u0130       \\\\u0069       capital letter I with dot above -> small letter i\n","  tr (Turkish)             \\\\u0049       \\\\u0131       capital letter I -> small letter dotless i\n","  (all)                    French Fries  french fries  lowercased all chars in String\n","  (all)                    ΙΧΘΥΣ         ιχθυσ         lowercased all chars in String\n","  ======================== ============= ============= ==================================================\n","\n","  Parameters:\n","\n","      locale - use the case transformation rules for this locale\n","\n","  Returns:\n","\n","      the String, converted to lowercase.\n","\n","  Since:\n","\n","      1.1\n","\n","  See Also:\n","\n","      - toLowerCase()\n","      - toUpperCase()\n","      - toUpperCase(Locale)\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.51\n","  toLowerCase\n","\n","      public String toLowerCase()\n","\n","  Converts all of the characters in this String to lower case using the rules of the default locale. This method is equivalent\n","  to toLowerCase(Locale.getDefault()).\n","\n","  API Note:\n","\n","      This method is locale sensitive, and may produce unexpected results if used for strings that are intended to be interpreted\n","      locale independently. Examples are programming language identifiers, protocol keys, and HTML tags. For instance,\n","      \"TITLE\".toLowerCase() in a Turkish locale returns \"t\\u0131tle\", where '\\u0131' is the LATIN SMALL LETTER DOTLESS I\n","      character. To obtain correct results for locale insensitive strings, use toLowerCase(Locale.ROOT).\n","\n","  Returns:\n","\n","      the String, converted to lowercase.\n","\n","  See Also:\n","\n","      - toLowerCase(Locale)\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.52\n","  toUpperCase\n","\n","      public String toUpperCase(Locale locale)\n","\n","  Converts all of the characters in this String to upper case using the rules of the given Locale. Case mapping is based on\n","  the Unicode Standard version specified by the Character class. Since case mappings are not always 1:1 char mappings, the\n","  resulting String and this String may differ in length.\n","\n","  Examples of locale-sensitive and 1:M case mappings are in the following table:\n","\n","  ======================== ============== ================ ==================================================\n","  Language Code of Locale  Lower Case     Upper Case       Description\n","  ======================== ============== ================ ==================================================\n","  tr (Turkish)             \\\\u0069        \\\\u0130          small letter i -> capital letter I with dot above\n","  tr (Turkish)             \\\\u0131        \\\\u0049          small letter dotless i -> capital letter I\n","  (all)                    \\\\u00df        \\\\u0053 \\\\u0053  small letter sharp s -> two letters: SS\n","  (all)                    Fahrvergnügen  FAHRVERGNÜGEN    \n","  ======================== ============== ================ ==================================================\n","\n","  Parameters:\n","\n","      locale - use the case transformation rules for this locale\n","\n","  Returns:\n","\n","      the String, converted to uppercase.\n","\n","  Since:\n","\n","      1.1\n","\n","  See Also:\n","\n","      - toUpperCase()\n","      - toLowerCase()\n","      - toLowerCase(Locale)\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.53\n","  toUpperCase\n","\n","      public String toUpperCase()\n","\n","  Converts all of the characters in this String to upper case using the rules of the default locale. This method is equivalent\n","  to toUpperCase(Locale.getDefault()).\n","\n","  API Note:\n","\n","      This method is locale sensitive, and may produce unexpected results if used for strings that are intended to be interpreted\n","      locale independently. Examples are programming language identifiers, protocol keys, and HTML tags. For instance,\n","      \"title\".toUpperCase() in a Turkish locale returns \"T\\u0130TLE\", where '\\u0130' is the LATIN CAPITAL LETTER I WITH DOT\n","      ABOVE character. To obtain correct results for locale insensitive strings, use toUpperCase(Locale.ROOT).\n","\n","  Returns:\n","\n","      the String, converted to uppercase.\n","\n","  See Also:\n","\n","      - toUpperCase(Locale)\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.54\n","  trim\n","\n","      public String trim()\n","\n","  Returns a string whose value is this string, with all leading and trailing space removed, where space is defined as any\n","  character whose codepoint is less than or equal to 'U+0020' (the space character).\n","\n","  If this String object represents an empty character sequence, or the first and last characters of character sequence\n","  represented by this String object both have codes that are not space (as defined above), then a reference to this String\n","  object is returned.\n","\n","  Otherwise, if all characters in this string are space (as defined above), then a String object representing an empty string\n","  is returned.\n","\n","  Otherwise, let k be the index of the first character in the string whose code is not a space (as defined above) and let m\n","  be the index of the last character in the string whose code is not a space (as defined above). A String object is returned,\n","  representing the substring of this string that begins with the character at index k and ends with the character at index\n","  m-that is, the result of this.substring(k, m + 1).\n","\n","  This method may be used to trim space (as defined above) from the beginning and end of a string.\n","\n","  Returns:\n","\n","      a string whose value is this string, with all leading and trailing space removed, or this string if it has no leading or\n","      trailing space.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.55\n","  strip\n","\n","      public String strip()\n","\n","  Returns a string whose value is this string, with all leading and trailing white space removed.\n","\n","  If this String object represents an empty string, or if all code points in this string are white space, then an empty\n","  string is returned.\n","\n","  Otherwise, returns a substring of this string beginning with the first code point that is not a white space up to and\n","  including the last code point that is not a white space.\n","\n","  This method may be used to strip white space from the beginning and end of a string.\n","\n","  Returns:\n","\n","      a string whose value is this string, with all leading and trailing white space removed\n","\n","  Since:\n","\n","      11\n","\n","  See Also:\n","\n","      - Character.isWhitespace(int)\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.56\n","  stripLeading\n","\n","      public String stripLeading()\n","\n","  Returns a string whose value is this string, with all leading white space removed.\n","\n","  If this String object represents an empty string, or if all code points in this string are white space, then an empty\n","  string is returned.\n","\n","  Otherwise, returns a substring of this string beginning with the first code point that is not a white space up to and\n","  including the last code point of this string.\n","\n","  This method may be used to trim white space from the beginning of a string.\n","\n","  Returns:\n","\n","      a string whose value is this string, with all leading white space removed\n","\n","  Since:\n","\n","      11\n","\n","  See Also:\n","\n","      - Character.isWhitespace(int)\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.57\n","  stripTrailing\n","\n","      public String stripTrailing()\n","\n","  Returns a string whose value is this string, with all trailing white space removed.\n","\n","  If this String object represents an empty string, or if all characters in this string are white space, then an empty string\n","  is returned.\n","\n","  Otherwise, returns a substring of this string beginning with the first code point of this string up to and including the last\n","  code point that is not a white space.\n","\n","  This method may be used to trim white space from the end of a string.\n","\n","  Returns:\n","\n","      a string whose value is this string, with all trailing white space removed\n","\n","  Since:\n","\n","      11\n","\n","  See Also:\n","\n","      - Character.isWhitespace(int)\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.58\n","  isBlank\n","\n","      public boolean isBlank()\n","\n","  Returns true if the string is empty or contains only white space codepoints, otherwise false.\n","\n","  Returns:\n","\n","      true if the string is empty or contains only white space codepoints, otherwise false\n","\n","  Since:\n","\n","      11\n","\n","  See Also:\n","\n","      - Character.isWhitespace(int)\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.59\n","  lines\n","\n","      public Stream<String> lines()\n","\n","  Returns a stream of lines extracted from this string, separated by line terminators.\n","\n","  A line terminator is one of the following: a line feed character \"\\n\" (U+000A), a carriage return character \"\\r\"\n","  (U+000D), or a carriage return followed immediately by a line feed \"\\r\\n\" (U+000D U+000A).\n","\n","  A line is either a sequence of zero or more characters followed by a line terminator, or it is a sequence of one or more\n","  characters followed by the end of the string. A line does not include the line terminator.\n","\n","  The stream returned by this method contains the lines from this string in the order in which they occur.\n","\n","  API Note:\n","\n","      This definition of line implies that an empty string has zero lines and that there is no empty line following a line\n","      terminator at the end of a string.\n","\n","  Implementation Note:\n","\n","      This method provides better performance than split(\"\\R\") by supplying elements lazily and by faster search of new line\n","      terminators.\n","\n","  Returns:\n","\n","      the stream of lines extracted from this string\n","\n","  Since:\n","\n","      11\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.60\n","  indent\n","\n","      public String indent(int n)\n","\n","  Adjusts the indentation of each line of this string based on the value of n, and normalizes line termination characters.\n","\n","  This string is conceptually separated into lines using lines(). Each line is then adjusted as described below and then\n","  suffixed with a line feed \"\\n\" (U+000A). The resulting lines are then concatenated and returned.\n","\n","  If n > 0 then n spaces (U+0020) are inserted at the beginning of each line.\n","\n","  If n < 0 then up to n white space characters are removed from the beginning of each line. If a given line does not\n","  contain sufficient white space then all leading white space characters are removed. Each white space character is treated as\n","  a single character. In particular, the tab character \"\\t\" (U+0009) is considered a single character; it is not expanded.\n","\n","  If n == 0 then the line remains unchanged. However, line terminators are still normalized.\n","\n","  Parameters:\n","\n","      n - number of leading white space characters to add or remove\n","\n","  Returns:\n","\n","      string with indentation adjusted and line endings normalized\n","\n","  Since:\n","\n","      12\n","\n","  See Also:\n","\n","      - lines()\n","      - isBlank()\n","      - Character.isWhitespace(int)\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.61\n","  stripIndent\n","\n","      public String stripIndent()\n","\n","  Returns a string whose value is this string, with incidental white space removed from the beginning and end of every line.\n","\n","  Incidental white space is often present in a text block to align the content with the opening delimiter. For example, in the\n","  following code, dots represent incidental white space:\n","\n","       String html = \"\"\"\n","       ..............<html>\n","       ..............    <body>\n","       ..............        <p>Hello, world</p>\n","       ..............    </body>\n","       ..............</html>\n","       ..............\"\"\";\n","\n","  This method treats the incidental white space as indentation to be stripped, producing a string that preserves the relative\n","  indentation of the content. Using | to visualize the start of each line of the string:\n","\n","       |<html>\n","       |    <body>\n","       |        <p>Hello, world</p>\n","       |    </body>\n","       |</html>\n","\n","  First, the individual lines of this string are extracted. A line is a sequence of zero or more characters followed by either\n","  a line terminator or the end of the string. If the string has at least one line terminator, the last line consists of the\n","  characters between the last terminator and the end of the string. Otherwise, if the string has no terminators, the last line is\n","  the start of the string to the end of the string, in other words, the entire string. A line does not include the line\n","  terminator.\n","\n","  Then, the minimum indentation (min) is determined as follows:\n","\n","  - For each non-blank line (as defined by isBlank()), the leading white space characters are counted.\n","\n","  - The leading white space characters on the last line are also counted even if blank.\n","\n","  The min value is the smallest of these counts.\n","\n","  For each non-blank line, min leading white space characters are removed, and any trailing white space characters are\n","  removed. Blank lines are replaced with the empty string.\n","\n","  Finally, the lines are joined into a new string, using the LF character \"\\n\" (U+000A) to separate lines.\n","\n","  API Note:\n","\n","      This method's primary purpose is to shift a block of lines as far as possible to the left, while preserving relative\n","      indentation. Lines that were indented the least will thus have no leading white space. The result will have the same\n","      number of line terminators as this string. If this string ends with a line terminator then the result will end with a line\n","      terminator.\n","\n","  Implementation Requirements:\n","\n","      This method treats all white space characters as having equal width. As long as the indentation on every line is\n","      consistently composed of the same character sequences, then the result will be as described above.\n","\n","  Returns:\n","\n","      string with incidental indentation removed and line terminators normalized\n","\n","  Since:\n","\n","      15\n","\n","  See Also:\n","\n","      - lines()\n","      - isBlank()\n","      - indent(int)\n","      - Character.isWhitespace(int)\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.62\n","  translateEscapes\n","\n","      public String translateEscapes()\n","\n","  Returns a string whose value is this string, with escape sequences translated as if in a string literal.\n","\n","  Escape sequences are translated as follows;\n","\n","  ==================== ================ =======================\n","  Escape               Name             Translation\n","  ==================== ================ =======================\n","  \\\\b                  backspace        U+0008\n","  \\\\t                  horizontal tab   U+0009\n","  \\\\n                  line feed        U+000A\n","  \\\\f                  form feed        U+000C\n","  \\\\r                  carriage return  U+000D\n","  \\\\s                  space            U+0020\n","  \\\\\"                  double quote     U+0022\n","  \\\\'                  single quote     U+0027\n","  \\\\\\\\                 backslash        U+005C\n","  \\\\0 - \\\\377          octal escape     code point equivalents\n","  \\\\<line-terminator>  continuation     discard\n","  ==================== ================ =======================\n","\n","  Implementation Note:\n","\n","      This method does not translate Unicode escapes such as \"\\u2022\". Unicode escapes are translated by the Java compiler\n","      when reading input characters and are not part of the string literal specification.\n","\n","  Returns:\n","\n","      String with escape sequences translated.\n","\n","  Throws:\n","\n","      IllegalArgumentException - when an escape sequence is malformed.\n","\n","  See Java Language Specification:\n","\n","      3.10.7 Escape Sequences\n","\n","  Since:\n","\n","      15\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.63\n","  transform\n","\n","      public <R> R transform(Function<? super String,? extends R> f)\n","\n","  This method allows the application of a function to this string. The function should expect a single String argument and\n","  produce an R result.\n","\n","  Any exception thrown by f.apply() will be propagated to the caller.\n","\n","  Type Parameters:\n","\n","      R - the type of the result\n","\n","  Parameters:\n","\n","      f - a function to apply\n","\n","  Returns:\n","\n","      the result of applying the function to this string\n","\n","  Since:\n","\n","      12\n","\n","  See Also:\n","\n","      - Function\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.64\n","  toString\n","\n","      public String toString()\n","\n","  This object (which is already a string!) is itself returned.\n","\n","  Specified by:\n","\n","      toString in interface CharSequence\n","\n","  Overrides:\n","\n","      toString in class Object\n","\n","  Returns:\n","\n","      the string itself.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.65\n","  chars\n","\n","      public IntStream chars()\n","\n","  Returns a stream of int zero-extending the char values from this sequence. Any char which maps to a surrogate code point\n","  is passed through uninterpreted.\n","\n","  Specified by:\n","\n","      chars in interface CharSequence\n","\n","  Returns:\n","\n","      an IntStream of char values from this sequence\n","\n","  Since:\n","\n","      9\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.66\n","  codePoints\n","\n","      public IntStream codePoints()\n","\n","  Returns a stream of code point values from this sequence. Any surrogate pairs encountered in the sequence are combined as if by\n","  Character.toCodePoint and the result is passed to the stream. Any other code units, including ordinary BMP characters,\n","  unpaired surrogates, and undefined code units, are zero-extended to int values which are then passed to the stream.\n","\n","  Specified by:\n","\n","      codePoints in interface CharSequence\n","\n","  Returns:\n","\n","      an IntStream of Unicode code points from this sequence\n","\n","  Since:\n","\n","      9\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.67\n","  toCharArray\n","\n","      public char[] toCharArray()\n","\n","  Converts this string to a new character array.\n","\n","  Returns:\n","\n","      a newly allocated character array whose length is the length of this string and whose contents are initialized to contain\n","      the character sequence represented by this string.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.68\n","  format\n","\n","      public static String format(String format, Object... args)\n","\n","  Returns a formatted string using the specified format string and arguments.\n","\n","  The locale always used is the one returned by Locale.getDefault(Locale.Category) with FORMAT category specified.\n","\n","  Parameters:\n","\n","      format - A format string\n","      args - Arguments referenced by the format specifiers in the format string. If there are more arguments than format\n","      specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of\n","      arguments is limited by the maximum dimension of a Java array as defined by The Java Virtual Machine Specification. The\n","      behaviour on a null argument depends on the conversion.\n","\n","  Returns:\n","\n","      A formatted string\n","\n","  Throws:\n","\n","      IllegalFormatException - If a format string contains an illegal syntax, a format specifier that is incompatible with\n","      the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all\n","      possible formatting errors, see the Details section of the formatter class specification.\n","\n","  Since:\n","\n","      1.5\n","\n","  See Also:\n","\n","      - Formatter\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.69\n","  format\n","\n","      public static String format(Locale l, String format, Object... args)\n","\n","  Returns a formatted string using the specified locale, format string, and arguments.\n","\n","  Parameters:\n","\n","      l - The locale to apply during formatting. If l is null then no localization is applied.\n","      format - A format string\n","      args - Arguments referenced by the format specifiers in the format string. If there are more arguments than format\n","      specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of\n","      arguments is limited by the maximum dimension of a Java array as defined by The Java Virtual Machine Specification. The\n","      behaviour on a null argument depends on the conversion.\n","\n","  Returns:\n","\n","      A formatted string\n","\n","  Throws:\n","\n","      IllegalFormatException - If a format string contains an illegal syntax, a format specifier that is incompatible with\n","      the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all\n","      possible formatting errors, see the Details section of the formatter class specification\n","\n","  Since:\n","\n","      1.5\n","\n","  See Also:\n","\n","      - Formatter\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.70\n","  formatted\n","\n","      public String formatted(Object... args)\n","\n","  Formats using this string as the format string, and the supplied arguments.\n","\n","  Implementation Requirements:\n","\n","      This method is equivalent to String.format(this, args).\n","\n","  Parameters:\n","\n","      args - Arguments referenced by the format specifiers in this string.\n","\n","  Returns:\n","\n","      A formatted string\n","\n","  Since:\n","\n","      15\n","\n","  See Also:\n","\n","      - format(String,Object...)\n","      - Formatter\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.71\n","  valueOf\n","\n","      public static String valueOf(Object obj)\n","\n","  Returns the string representation of the Object argument.\n","\n","  Parameters:\n","\n","      obj - an Object.\n","\n","  Returns:\n","\n","      if the argument is null, then a string equal to \"null\"; otherwise, the value of obj.toString() is returned.\n","\n","  See Also:\n","\n","      - Object.toString()\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.72\n","  valueOf\n","\n","      public static String valueOf(char[] data)\n","\n","  Returns the string representation of the char array argument. The contents of the character array are copied; subsequent\n","  modification of the character array does not affect the returned string.\n","\n","  Parameters:\n","\n","      data - the character array.\n","\n","  Returns:\n","\n","      a String that contains the characters of the character array.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.73\n","  valueOf\n","\n","      public static String valueOf(char[] data, int offset, int count)\n","\n","  Returns the string representation of a specific subarray of the char array argument.\n","\n","  The offset argument is the index of the first character of the subarray. The count argument specifies the length of the\n","  subarray. The contents of the subarray are copied; subsequent modification of the character array does not affect the returned\n","  string.\n","\n","  Parameters:\n","\n","      data - the character array.\n","      offset - initial offset of the subarray.\n","      count - length of the subarray.\n","\n","  Returns:\n","\n","      a String that contains the characters of the specified subarray of the character array.\n","\n","  Throws:\n","\n","      IndexOutOfBoundsException - if offset is negative, or count is negative, or offset+count is larger than\n","      data.length.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.74\n","  copyValueOf\n","\n","      public static String copyValueOf(char[] data, int offset, int count)\n","\n","  Equivalent to valueOf(char[], int, int).\n","\n","  Parameters:\n","\n","      data - the character array.\n","      offset - initial offset of the subarray.\n","      count - length of the subarray.\n","\n","  Returns:\n","\n","      a String that contains the characters of the specified subarray of the character array.\n","\n","  Throws:\n","\n","      IndexOutOfBoundsException - if offset is negative, or count is negative, or offset+count is larger than\n","      data.length.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.75\n","  copyValueOf\n","\n","      public static String copyValueOf(char[] data)\n","\n","  Equivalent to valueOf(char[]).\n","\n","  Parameters:\n","\n","      data - the character array.\n","\n","  Returns:\n","\n","      a String that contains the characters of the character array.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.76\n","  valueOf\n","\n","      public static String valueOf(boolean b)\n","\n","  Returns the string representation of the boolean argument.\n","\n","  Parameters:\n","\n","      b - a boolean.\n","\n","  Returns:\n","\n","      if the argument is true, a string equal to \"true\" is returned; otherwise, a string equal to \"false\" is returned.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.77\n","  valueOf\n","\n","      public static String valueOf(char c)\n","\n","  Returns the string representation of the char argument.\n","\n","  Parameters:\n","\n","      c - a char.\n","\n","  Returns:\n","\n","      a string of length 1 containing as its single character the argument c.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.78\n","  valueOf\n","\n","      public static String valueOf(int i)\n","\n","  Returns the string representation of the int argument.\n","\n","  The representation is exactly the one returned by the Integer.toString method of one argument.\n","\n","  Parameters:\n","\n","      i - an int.\n","\n","  Returns:\n","\n","      a string representation of the int argument.\n","\n","  See Also:\n","\n","      - Integer.toString(int, int)\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.79\n","  valueOf\n","\n","      public static String valueOf(long l)\n","\n","  Returns the string representation of the long argument.\n","\n","  The representation is exactly the one returned by the Long.toString method of one argument.\n","\n","  Parameters:\n","\n","      l - a long.\n","\n","  Returns:\n","\n","      a string representation of the long argument.\n","\n","  See Also:\n","\n","      - Long.toString(long)\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.80\n","  valueOf\n","\n","      public static String valueOf(float f)\n","\n","  Returns the string representation of the float argument.\n","\n","  The representation is exactly the one returned by the Float.toString method of one argument.\n","\n","  Parameters:\n","\n","      f - a float.\n","\n","  Returns:\n","\n","      a string representation of the float argument.\n","\n","  See Also:\n","\n","      - Float.toString(float)\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.81\n","  valueOf\n","\n","      public static String valueOf(double d)\n","\n","  Returns the string representation of the double argument.\n","\n","  The representation is exactly the one returned by the Double.toString method of one argument.\n","\n","  Parameters:\n","\n","      d - a double.\n","\n","  Returns:\n","\n","      a string representation of the double argument.\n","\n","  See Also:\n","\n","      - Double.toString(double)\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.82\n","  intern\n","\n","      public String intern()\n","\n","  Returns a canonical representation for the string object.\n","\n","  A pool of strings, initially empty, is maintained privately by the class String.\n","\n","  When the intern method is invoked, if the pool already contains a string equal to this String object as determined by the\n","  equals(Object) method, then the string from the pool is returned. Otherwise, this String object is added to the pool and\n","  a reference to this String object is returned.\n","\n","  It follows that for any two strings s and t, s.intern() == t.intern() is true if and only if s.equals(t) is true.\n","\n","  All literal strings and string-valued constant expressions are interned. String literals are defined in section 3.10.5 of the\n","  The Java Language Specification.\n","\n","  Returns:\n","\n","      a string that has the same contents as this string, but is guaranteed to be from a pool of unique strings.\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.83\n","  repeat\n","\n","      public String repeat(int count)\n","\n","  Returns a string whose value is the concatenation of this string repeated count times.\n","\n","  If this string is empty or count is zero then the empty string is returned.\n","\n","  Parameters:\n","\n","      count - number of times to repeat\n","\n","  Returns:\n","\n","      A string composed of this string repeated count times or the empty string if this string is empty or count is zero\n","\n","  Throws:\n","\n","      IllegalArgumentException - if the count is negative.\n","\n","  Since:\n","\n","      11\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.84\n","  describeConstable\n","\n","      public Optional<String> describeConstable()\n","\n","  Returns an Optional containing the nominal descriptor for this instance, which is the instance itself.\n","\n","  Specified by:\n","\n","      describeConstable in interface Constable\n","\n","  Returns:\n","\n","      an Optional describing the String instance\n","\n","  Since:\n","\n","      12\n","\n","  ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— §1.6.85\n","  resolveConstantDesc\n","\n","      public String resolveConstantDesc(MethodHandles.Lookup lookup)\n","\n","  Resolves this instance as a ConstantDesc, the result of which is the instance itself.\n","\n","  Specified by:\n","\n","      resolveConstantDesc in interface ConstantDesc\n","\n","  Parameters:\n","\n","      lookup - ignored\n","\n","  Returns:\n","\n","      the String instance\n","\n","  Since:\n","\n","      12\n","\n","  © 1993, 2023, Oracle and/or its affiliates. All rights reserved.\n","  Documentation extracted from Debian's OpenJDK Development Kit package.\n","  Licensed under the GNU General Public License, version 2, with the Classpath Exception.\n","  Various third party code in OpenJDK is licensed under different licenses (see Debian package).\n","  Java and OpenJDK are trademarks or registered trademarks of Oracle and/or its affiliates.\n","  https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/String.html\n"],"emph":[[40,83,113,"The Java Language Specification"],[45,62,85,"supplementary characters"],[45,106,120,"surrogate pairs"],[58,39,69,"The Java Language Specification"],[63,7,33,"Java Language Specification"],[485,34,36,"not"],[628,114,114,"c"],[629,68,68,"b"],[1215,30,32,"not"],[1244,39,39,"k"],[1244,113,113,"k"],[1280,30,32,"not"],[1317,39,39,"k"],[1317,88,88,"k"],[1318,5,5,"k"],[1320,30,32,"not"],[1355,30,32,"not"],[1442,43,43,"i"],[1465,114,114,"k"],[1469,61,61,"k"],[1494,43,43,"k"],[1498,61,61,"k"],[1538,66,66,"k"],[1542,61,61,"k"],[1577,90,90,"k"],[1581,60,60,"k"],[1603,120,120,"k"],[1608,60,60,"k"],[1917,44,46,"str"],[1917,56,60,"regex"],[1919,19,23,"regex"],[1919,26,28,"str"],[1967,44,46,"str"],[1967,61,65,"regex"],[1967,68,71,"repl"],[1970,20,24,"regex"],[1970,35,37,"str"],[1970,53,56,"repl"],[2004,44,46,"str"],[2004,59,63,"regex"],[2004,66,69,"repl"],[2007,20,24,"regex"],[2007,35,37,"str"],[2007,51,54,"repl"],[2074,12,16,"limit"],[2074,71,75,"limit"],[2075,10,14,"limit"],[2077,12,16,"limit"],[2080,12,16,"limit"],[2095,44,47,"str."],[2095,54,58,"regex"],[2095,61,61,"n"],[2097,20,24,"regex"],[2097,33,35,"str"],[2097,39,39,"n"],[2129,49,54,"except"],[2140,12,16,"limit"],[2140,71,75,"limit"],[2141,15,19,"limit"],[2142,12,16,"limit"],[2144,12,16,"limit"],[2161,48,51,"str."],[2161,72,76,"regex"],[2161,79,79,"n"],[2164,24,28,"regex"],[2164,51,53,"str"],[2164,57,57,"n"],[2435,18,18,"k"],[2435,123,123,"m"],[2437,85,85,"k"],[2438,3,3,"m"],[2554,5,19,"line terminator"],[2557,5,8,"line"],[2564,26,29,"line"],[2643,63,66,"line"],[2649,13,31,"minimum indentation"],[2655,7,9,"min"],[2657,28,30,"min"],[2716,24,26,"not"],[2727,7,33,"Java Language Specification"]],"error":{},"h1":[2],"h2":[80,90,147,476,497,825],"h3":[471,479,500,508,521,534,554,580,619,649,677,704,728,748,774,793,805,828,843,862,888,916,944,971,998,1028,1065,1091,1113,1131,1158,1180,1203,1232,1272,1302,1335,1376,1396,1417,1434,1459,1485,1529,1572,1598,1629,1650,1682,1715,1737,1762,1788,1815,1856,1880,1911,1942,1961,1998,2035,2057,2121,2181,2220,2256,2299,2337,2360,2398,2421,2448,2475,2502,2529,2548,2581,2617,2690,2736,2766,2785,2805,2826,2838,2873,2907,2935,2954,2970,2996,3018,3033,3048,3063,3084,3105,3126,3147,3169,3194,3213],"h4":{},"h5":{},"h6":{},"link":[["java.lang.Object","object",4,3,18],["Serializable","../io/serializable",10,7,18],["CharSequence","charsequence",10,21,32],["Comparable","comparable",10,35,44],["String","string",10,46,51],["Constable","constant/constable",10,55,63],["ConstantDesc","constant/constantdesc",10,66,77],["Character","character",37,85,93],["NullPointerException","nullpointerexception",43,3,22],["Unicode Character Representations","character#unicode",46,20,52],["Collator","../text/collator",52,94,101],["Object.toString()","object#toString()",73,9,25],["StringBuffer","stringbuffer",74,9,20],["StringBuilder","stringbuilder",75,9,21],["Charset","../nio/charset/charset",76,9,15],["Object","object",471,39,44],["clone","object#clone()",473,3,7],["finalize","object#finalize()",473,10,17],["getClass","object#getClass()",473,20,27],["notify","object#notify()",473,30,35],["notifyAll","object#notifyAll()",473,38,46],["wait","object#wait(long,int)",473,49,52],["wait","object#wait(long,int)",473,55,58],["wait","object#wait(long,int)",473,61,64],["compareToIgnoreCase","#compareToIgnoreCase(java.lang.String)",483,49,67],["Collator","../text/collator",486,16,23],["Collator","../text/collator",494,9,16],["IndexOutOfBoundsException","indexoutofboundsexception",550,7,31],["Unicode code point","character#unicode",558,74,91],["IllegalArgumentException","illegalargumentexception",571,7,30],["IndexOutOfBoundsException","indexoutofboundsexception",572,7,31],["Charset","../nio/charset/charset",587,28,34],["default charset","../nio/charset/charset#defaultCharset()",587,67,81],["String(byte[],int)","#%3Cinit%3E(byte%5B%5D,int)",594,72,89],["IndexOutOfBoundsException","indexoutofboundsexception",605,7,31],["String(byte[], int)","#%3Cinit%3E(byte%5B%5D,int)",610,9,27],["String(byte[], int, int, java.lang.String)","#%3Cinit%3E(byte%5B%5D,int,int,java.lang.String)",611,9,50],["String(byte[], int, int, java.nio.charset.Charset)","#%3Cinit%3E(byte%5B%5D,int,int,java.nio.charset.Charset)",612,9,58],["String(byte[], int, int)","#%3Cinit%3E(byte%5B%5D,int,int)",613,9,32],["String(byte[], java.lang.String)","#%3Cinit%3E(byte%5B%5D,java.lang.String)",614,9,40],["String(byte[], java.nio.charset.Charset)","#%3Cinit%3E(byte%5B%5D,java.nio.charset.Charset)",615,9,48],["String(byte[])","#%3Cinit%3E(byte%5B%5D)",616,9,22],["Charset","../nio/charset/charset",626,28,34],["default charset","../nio/charset/charset#defaultCharset()",626,67,81],["String(byte[], int, int, java.lang.String)","#%3Cinit%3E(byte%5B%5D,int,int,java.lang.String)",641,9,50],["String(byte[], int, int, java.nio.charset.Charset)","#%3Cinit%3E(byte%5B%5D,int,int,java.nio.charset.Charset)",642,9,58],["String(byte[], int, int)","#%3Cinit%3E(byte%5B%5D,int,int)",643,9,32],["String(byte[], java.lang.String)","#%3Cinit%3E(byte%5B%5D,java.lang.String)",644,9,40],["String(byte[], java.nio.charset.Charset)","#%3Cinit%3E(byte%5B%5D,java.nio.charset.Charset)",645,9,48],["String(byte[])","#%3Cinit%3E(byte%5B%5D)",646,9,22],["CharsetDecoder","../nio/charset/charsetdecoder",656,112,125],["charset","../nio/charset/charset",664,45,51],["UnsupportedEncodingException","../io/unsupportedencodingexception",668,7,34],["IndexOutOfBoundsException","indexoutofboundsexception",669,7,31],["charset","../nio/charset/charset",681,91,97],["CharsetDecoder","../nio/charset/charsetdecoder",685,7,20],["charset","../nio/charset/charset",692,21,27],["IndexOutOfBoundsException","indexoutofboundsexception",696,7,31],["charset","../nio/charset/charset",708,88,94],["CharsetDecoder","../nio/charset/charsetdecoder",711,112,125],["charset","../nio/charset/charset",717,45,51],["UnsupportedEncodingException","../io/unsupportedencodingexception",721,7,34],["charset","../nio/charset/charset",732,88,94],["CharsetDecoder","../nio/charset/charsetdecoder",736,7,20],["charset","../nio/charset/charset",741,21,27],["default charset","../nio/charset/charset#defaultCharset()",752,81,95],["CharsetDecoder","../nio/charset/charsetdecoder",756,3,16],["IndexOutOfBoundsException","indexoutofboundsexception",766,7,31],["default charset","../nio/charset/charset#defaultCharset()",778,78,92],["CharsetDecoder","../nio/charset/charsetdecoder",782,3,16],["Unicode code units","character#unicode",832,75,92],["length","charsequence#length()",836,7,12],["CharSequence","charsequence",836,27,38],["length()","#length()",847,33,40],["isEmpty","charsequence#isEmpty()",851,7,13],["CharSequence","charsequence",851,28,39],["length()","#length()",855,15,22],["surrogate","character#unicode",869,49,57],["charAt","charsequence#charAt(int)",873,7,12],["CharSequence","charsequence",873,27,38],["IndexOutOfBoundsException","indexoutofboundsexception",885,7,31],["length()","#length()",893,20,27],["IndexOutOfBoundsException","indexoutofboundsexception",909,7,31],["length","charsequence#length()",921,24,29],["IndexOutOfBoundsException","indexoutofboundsexception",937,7,31],["IndexOutOfBoundsException","indexoutofboundsexception",963,7,31],["IndexOutOfBoundsException","indexoutofboundsexception",989,7,31],["IndexOutOfBoundsException","indexoutofboundsexception",1019,7,31],["getBytes()","#getBytes()",1035,3,12],["default charset","../nio/charset/charset#defaultCharset()",1035,37,51],["IndexOutOfBoundsException","indexoutofboundsexception",1056,7,31],["CharsetEncoder","../nio/charset/charsetencoder",1071,107,120],["charset","../nio/charset/charset",1076,45,51],["UnsupportedEncodingException","../io/unsupportedencodingexception",1084,7,34],["charset","../nio/charset/charset",1095,64,70],["CharsetEncoder","../nio/charset/charsetencoder",1098,14,27],["Charset","../nio/charset/charset",1102,21,27],["default charset","../nio/charset/charset#defaultCharset()",1117,58,72],["CharsetEncoder","../nio/charset/charsetencoder",1119,109,122],["Collator","../text/collator",1138,49,56],["equals","object#equals(java.lang.Object)",1142,7,12],["Object","object",1142,23,28],["compareTo(String)","#compareTo(java.lang.String)",1154,9,25],["equalsIgnoreCase(String)","#equalsIgnoreCase(java.lang.String)",1155,9,32],["Collator","../text/collator",1165,49,56],["Collator","../text/collator",1188,49,56],["Collator","../text/collator",1216,3,10],["equals(Object)","#equals(java.lang.Object)",1228,9,22],["codePoints()","#codePoints()",1229,9,20],["equals(Object)","#equals(java.lang.Object)",1240,63,76],["Collator","../text/collator",1255,49,56],["compareTo","comparable#compareTo(T)",1259,7,15],["Comparable","comparable",1259,30,39],["String","string",1259,41,46],["Collator","../text/collator",1281,7,14],["Collator","../text/collator",1298,9,16],["codePoints()","#codePoints()",1299,9,20],["Collator","../text/collator",1320,64,71],["Character.toLowerCase(","character#toLowerCase(int)",1352,11,32],["Character.toUpperCase(int)","character#toUpperCase(int)",1352,34,59],["Collator","../text/collator",1356,27,34],["codePoints()","#codePoints()",1373,9,20],["equals(Object)","#equals(java.lang.Object)",1410,42,55],["equals(Object)","#equals(java.lang.Object)",1431,42,55],["hashCode","object#hashCode()",1447,7,14],["Object","object",1447,25,30],["Object.equals(java.lang.Object)","object#equals(java.lang.Object)",1455,9,39],["System.identityHashCode(java.lang.Object)","system#identityHashCode(java.lang.Object)",1456,9,49],["substring(int)","#substring(int)",1512,14,27],["indexOf(int, int, int)","#indexOf(int,int,int)",1514,101,122],["String","string",1515,42,47],["StringIndexOutOfBoundsException","stringindexoutofboundsexception",1564,7,37],["substring(int)","#substring(int)",1665,14,27],["indexOf(String, int, int)","#indexOf(java.lang.String,int,int)",1668,7,31],["String","string",1668,66,71],["indexOf(String)","#indexOf(java.lang.String)",1692,28,42],["StringIndexOutOfBoundsException","stringindexoutofboundsexception",1707,7,37],["IndexOutOfBoundsException","indexoutofboundsexception",1785,7,31],["IndexOutOfBoundsException","indexoutofboundsexception",1811,7,31],["subSequence","charsequence#subSequence(int,int)",1831,7,17],["CharSequence","charsequence",1831,32,43],["CharSequence","charsequence",1835,73,84],["IndexOutOfBoundsException","indexoutofboundsexception",1848,7,31],["regular expression","../util/regex/pattern#sum",1915,54,71],["Pattern","../util/regex/pattern",1919,3,9],["matches(regex, str)","../util/regex/pattern#matches(java.lang.String,java.lang.CharSequence)",1919,11,29],["PatternSyntaxException","../util/regex/patternsyntaxexception",1931,7,28],["Pattern","../util/regex/pattern",1939,9,15],["regular expression","../util/regex/pattern#sum",1965,70,87],["Pattern","../util/regex/pattern",1970,4,10],["compile","../util/regex/pattern#compile(java.lang.String)",1970,12,18],["matcher","../util/regex/pattern#matcher(java.lang.CharSequence)",1970,27,33],["replaceFirst","../util/regex/matcher#replaceFirst(java.lang.String)",1970,40,51],["Matcher.replaceFirst(java.lang.String)","../util/regex/matcher#replaceFirst(java.lang.String)",1973,59,96],["Matcher.quoteReplacement(java.lang.String)","../util/regex/matcher#quoteReplacement(java.lang.String)",1974,3,44],["PatternSyntaxException","../util/regex/patternsyntaxexception",1987,7,28],["Pattern","../util/regex/pattern",1995,9,15],["regular expression","../util/regex/pattern#sum",2002,65,82],["Pattern","../util/regex/pattern",2007,4,10],["compile","../util/regex/pattern#compile(java.lang.String)",2007,12,18],["matcher","../util/regex/pattern#matcher(java.lang.CharSequence)",2007,27,33],["replaceAll","../util/regex/matcher#replaceAll(java.lang.String)",2007,40,49],["Matcher.replaceAll","../util/regex/matcher#replaceAll(java.lang.String)",2010,59,76],["Matcher.quoteReplacement(java.lang.String)","../util/regex/matcher#quoteReplacement(java.lang.String)",2011,3,44],["PatternSyntaxException","../util/regex/patternsyntaxexception",2024,7,28],["Pattern","../util/regex/pattern",2032,9,15],["regular expression","../util/regex/pattern#sum",2061,50,67],["Pattern","../util/regex/pattern",2097,4,10],["compile","../util/regex/pattern#compile(java.lang.String)",2097,12,18],["split","#split(java.lang.String,int)",2097,27,31],["PatternSyntaxException","../util/regex/patternsyntaxexception",2110,7,28],["Pattern","../util/regex/pattern",2118,9,15],["Pattern","../util/regex/pattern",2164,8,14],["compile","../util/regex/pattern#compile(java.lang.String)",2164,16,22],["splitWithDelimiters","../util/regex/pattern#splitWithDelimiters(java.lang.CharSequence,int)",2164,31,49],["regular expression","../util/regex/pattern#sum",2185,50,67],["split","#split(java.lang.String,int)",2187,56,60],["PatternSyntaxException","../util/regex/patternsyntaxexception",2209,7,28],["Pattern","../util/regex/pattern",2217,9,15],["NullPointerException","nullpointerexception",2245,7,26],["StringJoiner","../util/stringjoiner",2253,9,20],["NullPointerException","nullpointerexception",2287,7,26],["join(CharSequence,CharSequence...)","#join(java.lang.CharSequence,java.lang.CharSequence...)",2295,9,42],["StringJoiner","../util/stringjoiner",2296,9,20],["Character","character",2304,49,57],["toLowerCase()","#toLowerCase()",2332,9,21],["toUpperCase()","#toUpperCase()",2333,9,21],["toUpperCase(Locale)","#toUpperCase(java.util.Locale)",2334,9,27],["toLowerCase(Locale)","#toLowerCase(java.util.Locale)",2357,9,27],["Character","character",2365,49,57],["toUpperCase()","#toUpperCase()",2393,9,21],["toLowerCase()","#toLowerCase()",2394,9,21],["toLowerCase(Locale)","#toLowerCase(java.util.Locale)",2395,9,27],["toUpperCase(Locale)","#toUpperCase(java.util.Locale)",2418,9,27],["white space","character#isWhitespace(int)",2452,78,88],["white space","character#isWhitespace(int)",2454,94,104],["white space","character#isWhitespace(int)",2457,99,109],["white space","character#isWhitespace(int)",2458,47,57],["white space","character#isWhitespace(int)",2460,36,46],["Character.isWhitespace(int)","character#isWhitespace(int)",2472,9,35],["white space","character#isWhitespace(int)",2479,65,75],["white space","character#isWhitespace(int)",2481,94,104],["white space","character#isWhitespace(int)",2484,99,109],["white space","character#isWhitespace(int)",2487,35,45],["Character.isWhitespace(int)","character#isWhitespace(int)",2499,9,35],["white space","character#isWhitespace(int)",2506,66,76],["white space","character#isWhitespace(int)",2508,93,103],["white space","character#isWhitespace(int)",2512,28,38],["white space","character#isWhitespace(int)",2514,35,45],["Character.isWhitespace(int)","character#isWhitespace(int)",2526,9,35],["white space","character#isWhitespace(int)",2533,56,66],["white space","character#isWhitespace(int)",2537,52,62],["Character.isWhitespace(int)","character#isWhitespace(int)",2545,9,35],["lines()","#lines()",2587,58,64],["white space characters","character#isWhitespace(int)",2592,25,46],["white space characters","character#isWhitespace(int)",2593,51,72],["white space characters","character#isWhitespace(int)",2600,29,50],["lines()","#lines()",2612,9,15],["isBlank()","#isBlank()",2613,9,17],["Character.isWhitespace(int)","character#isWhitespace(int)",2614,9,35],["white space","character#isWhitespace(int)",2621,64,74],["white space","character#isWhitespace(int)",2623,14,24],["white space","character#isWhitespace(int)",2624,45,55],["white space","character#isWhitespace(int)",2634,37,47],["isBlank()","#isBlank()",2651,44,52],["white space","character#isWhitespace(int)",2651,68,78],["white space","character#isWhitespace(int)",2653,17,27],["blank","#isBlank()",2653,82,86],["non-blank","#isBlank()",2657,12,20],["white space","character#isWhitespace(int)",2657,40,50],["white space","character#isWhitespace(int)",2657,93,103],["Blank","#isBlank()",2658,12,16],["white space","character#isWhitespace(int)",2665,81,91],["white space","character#isWhitespace(int)",2671,30,40],["lines()","#lines()",2684,9,15],["isBlank()","#isBlank()",2685,9,17],["indent(int)","#indent(int)",2686,9,19],["Character.isWhitespace(int)","character#isWhitespace(int)",2687,9,35],["IllegalArgumentException","illegalargumentexception",2725,7,30],["Function","../util/function/function",2763,9,16],["toString","object#toString()",2774,7,14],["CharSequence","charsequence",2774,29,40],["toString","object#toString()",2778,7,14],["Object","object",2778,25,30],["surrogate code point","character#unicode",2789,103,122],["chars","charsequence#chars()",2794,7,11],["CharSequence","charsequence",2794,26,37],["Character.toCodePoint","character#toCodePoint(char,char)",2810,3,23],["codePoints","charsequence#codePoints()",2815,7,16],["CharSequence","charsequence",2815,31,42],["Locale.getDefault(Locale.Category)","../util/locale#getDefault(java.util.Locale.Category)",2844,49,82],["FORMAT","../util/locale.category#FORMAT",2844,89,94],["format string","../util/formatter#syntax",2848,18,30],["conversion","../util/formatter#syntax",2852,51,60],["IllegalFormatException","../util/illegalformatexception",2860,7,28],["Details","../util/formatter#detail",2862,43,49],["Formatter","../util/formatter",2870,9,17],["locale","../util/locale",2881,15,20],["format string","../util/formatter#syntax",2882,18,30],["conversion","../util/formatter#syntax",2886,51,60],["IllegalFormatException","../util/illegalformatexception",2894,7,28],["Details","../util/formatter#detail",2896,43,49],["Formatter","../util/formatter",2904,9,17],["format(String,Object...)","#format(java.lang.String,java.lang.Object...)",2931,9,32],["Formatter","../util/formatter",2932,9,17],["Object.toString()","object#toString()",2951,9,25],["IndexOutOfBoundsException","indexoutofboundsexception",2992,7,31],["valueOf(char[], int, int)","#valueOf(char%5B%5D,int,int)",3000,17,41],["IndexOutOfBoundsException","indexoutofboundsexception",3014,7,31],["valueOf(char[])","#valueOf(char%5B%5D)",3022,17,31],["Integer.toString(int, int)","integer#toString(int,int)",3081,9,34],["Long.toString(long)","long#toString(long)",3102,9,27],["Float.toString(float)","float#toString(float)",3123,9,29],["Double.toString(double)","double#toString(double)",3144,9,31],["equals(Object)","#equals(java.lang.Object)",3156,3,16],["IllegalArgumentException","illegalargumentexception",3187,7,30],["Optional","../util/optional",3198,14,21],["describeConstable","constant/constable#describeConstable()",3202,7,23],["Constable","constant/constable",3202,38,46],["Optional","../util/optional",3206,10,17],["String","string",3206,34,39],["ConstantDesc","constant/constantdesc",3217,31,42],["resolveConstantDesc","constant/constantdesc#resolveConstantDesc(java.lang.invoke.MethodHandles.Lookup)",3221,7,25],["ConstantDesc","constant/constantdesc",3221,40,51],["String","string",3229,11,16]],"strong":{},"tag":[["class-description",8],["field-detail",475],["CASE_INSENSITIVE_ORDER",478],["constructor-detail",496],["<init>()",499],["<init>(java.lang.String)",507],["<init>(char[])",520],["<init>(char[],int,int)",533],["<init>(int[],int,int)",553],["<init>(byte[],int,int,int)",579],["<init>(byte[],int)",618],["<init>(byte[],int,int,java.lang.String)",648],["<init>(byte[],int,int,java.nio.charset.Charset)",676],["<init>(byte[],java.lang.String)",703],["<init>(byte[],java.nio.charset.Charset)",727],["<init>(byte[],int,int)",747],["<init>(byte[])",773],["<init>(java.lang.StringBuffer)",792],["<init>(java.lang.StringBuilder)",804],["method-detail",824],["length()",827],["isEmpty()",842],["charAt(int)",861],["codePointAt(int)",887],["codePointBefore(int)",915],["codePointCount(int,int)",943],["offsetByCodePoints(int,int)",970],["getChars(int,int,char[],int)",997],["getBytes(int,int,byte[],int)",1027],["getBytes(java.lang.String)",1064],["getBytes(java.nio.charset.Charset)",1090],["getBytes()",1112],["equals(java.lang.Object)",1130],["contentEquals(java.lang.StringBuffer)",1157],["contentEquals(java.lang.CharSequence)",1179],["equalsIgnoreCase(java.lang.String)",1202],["compareTo(java.lang.String)",1231],["compareToIgnoreCase(java.lang.String)",1271],["regionMatches(int,java.lang.String,int,int)",1301],["regionMatches(boolean,int,java.lang.String,int,int)",1334],["startsWith(java.lang.String,int)",1375],["startsWith(java.lang.String)",1395],["endsWith(java.lang.String)",1416],["hashCode()",1433],["indexOf(int)",1458],["indexOf(int,int)",1484],["indexOf(int,int,int)",1528],["lastIndexOf(int)",1571],["lastIndexOf(int,int)",1597],["indexOf(java.lang.String)",1628],["indexOf(java.lang.String,int)",1649],["indexOf(java.lang.String,int,int)",1681],["lastIndexOf(java.lang.String)",1714],["lastIndexOf(java.lang.String,int)",1736],["substring(int)",1761],["substring(int,int)",1787],["subSequence(int,int)",1814],["concat(java.lang.String)",1855],["replace(char,char)",1879],["matches(java.lang.String)",1910],["contains(java.lang.CharSequence)",1941],["replaceFirst(java.lang.String,java.lang.String)",1960],["replaceAll(java.lang.String,java.lang.String)",1997],["replace(java.lang.CharSequence,java.lang.CharSequence)",2034],["split(java.lang.String,int)",2056],["splitWithDelimiters(java.lang.String,int)",2120],["split(java.lang.String)",2180],["join(java.lang.CharSequence,java.lang.CharSequence...)",2219],["join(java.lang.CharSequence,java.lang.Iterable)",2255],["toLowerCase(java.util.Locale)",2298],["toLowerCase()",2336],["toUpperCase(java.util.Locale)",2359],["toUpperCase()",2397],["trim()",2420],["strip()",2447],["stripLeading()",2474],["stripTrailing()",2501],["isBlank()",2528],["lines()",2547],["indent(int)",2580],["stripIndent()",2616],["translateEscapes()",2689],["transform(java.util.function.Function)",2735],["toString()",2765],["chars()",2784],["codePoints()",2804],["toCharArray()",2825],["format(java.lang.String,java.lang.Object...)",2837],["format(java.util.Locale,java.lang.String,java.lang.Object...)",2872],["formatted(java.lang.Object...)",2906],["valueOf(java.lang.Object)",2934],["valueOf(char[])",2953],["valueOf(char[],int,int)",2969],["copyValueOf(char[],int,int)",2995],["copyValueOf(char[])",3017],["valueOf(boolean)",3032],["valueOf(char)",3047],["valueOf(int)",3062],["valueOf(long)",3083],["valueOf(float)",3104],["valueOf(double)",3125],["intern()",3146],["repeat(int)",3168],["describeConstable()",3193],["resolveConstantDesc(java.lang.invoke.MethodHandles.Lookup)",3212]],"underline":{}}
